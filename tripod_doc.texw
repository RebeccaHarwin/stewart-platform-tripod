\documentclass[a4paper,10pt]{article}
\usepackage{graphicx}
\usepackage{fullpage}
\usepackage{amsmath}
\usepackage{listings}
\usepackage{appendix}
\usepackage{array}
\title{I16 KB mirror tripod calculations}
\author{R C Harwin, W S Harwin and S P Collins}
\date{September 3, 2014}
\begin{document}
\maketitle

\section{Introduction}
\label{sec:Intro}
The purpose of the tripod assembly is to provide a stable mount for a KB mirror system, providing six degrees of freedom (three positions and three angles). These are accomplished by changing the positions of the three leg bases, each in two orthogonal directions. The leg bases are allowed to hinge while the leg tops are completely free to pivot in any direction. Such a device is optimally constrained and, within constraints, there is a finite number of solutions for each of the six base translations to give the required angles and positions (in fact, there are two solutions for each leg, giving a total of 8). The purpose of this document is to give clear definitions for the required parameters and outline the steps required to perform calculations of (1) the top plate position and orientation for a given set of base translations and (2) the base translations for a given position and orientation of the top plate.

The solution of the equations that control the position of the 6-3 Stewart platform is particularly important in solving the equations that control the position of the tripod, as one way to solve the 6-3 Stewart platform is to convert it, as shown in Figure~\ref{fig:modplatform}, into the same form as the tripod.

\begin{figure}[h!]
\includegraphics[width=34pc]{modplatform1.png}
\caption{\label{fig:modplatform} Left: The modifications applied to the 6-3 Stewart platform to convert it into a tripod-like structure. These modifications enable its kinematics to be solved in both directions. Right: A 3D model of the tripod structure.}
\end{figure}



\section{Mathematics of the tripod}
\label{sec:maths}
\subsection{Geometry and definitions}
\label{sec:definitions}
The layout of the tripod, viewed from the top, is shown in Figure~\ref{fig:sketch}. Two coordinate systems are defined. The first ($XYZ$) is referenced to the base plate plane, which is defined as $Z$=0 and contains the three base points ${\bf B}_i$ ($i=1,2,3$).
The second ($xyz$) coordinate system is attached to the top plate, and the $z=0$ plane contains ${\bf T}_i$ ($i = 1, 2, 3$). $z$ points directly up from the plane and $y$ is parallel to ${\bf T}_1-{\bf T}_2$ (see Figure~\ref{fig:sketch}). To be able to manipulate the tripod, it is necessary to be able to transform between the two coordinate systems.

A `tooling point' ${\bf C}$ is defined, located at a fixed point $(C_x, C_y, C_z)$ in the ($xyz$) frame. Each leg base is free to pivot about a vector in the $Z=0$ plane, whose orientation is defined by an angle $\psi_i$, the angle through which the $Y$ axis is rotated about the $Z$ axis. The orientation of each leg (a unit vector along ${\bf T}_i-{\bf B}_i$) is given by a rotation of the $Z$ axis by an angle $\theta_i$ about the hinge vector in the $Z=0$ plane.

The orientation of the $(xyz)$ system is defined with respect to $(XYZ)$ in terms of rotations by three angles, $\alpha_1$, $\alpha_2$ and $\alpha_3$, about $X$, $Y$ and $Z$.

The purpose of these calculations is to find $C$ in the $(XYZ)$ coordinate system, i.e. $(C_X, C_Y, C_Z)$, and ($\alpha_1$, $\alpha_2$, $\alpha_3$) from given values of ${\bf B}_1$, ${\bf B}_2$, ${\bf B}_3$ and {\it vice versa}.

For convenience the base vectors ${\bf B}_i$ are written as sums of their centred values and translations along $X$ and $Y$ provided by two slides on each leg, {\it i.e.}, ${\bf B}_i={\bf B}^C_i+B^X_i {\bf \hat X}+B^Y_i {\bf \hat Y}$.

Finally, the (known and fixed) leg lengths are given by $l_i$ and the fixed distances between the top pivots are $t_i$ (see Figure~\ref{fig:sketch}).

The values of these parameters used in this particular implementation of the tripod can be found in Section~\ref{sec:testing}.

\begin{table}[h!]
\begin{center}
\begin{tabular}{|>{\centering\arraybackslash}p{2.5cm}|>{\centering\arraybackslash}p{12cm}|}
\hline
\textbf{Parameter} & \textbf{Definition}\\ \hline
(XYZ) & The coordinate system referenced to the base plate, where Z=0 is defined to be the base plate plane and contains the three base points of the tripod legs ${\bf B}_i$.\\ \hline
(xyz) & The coordinate system attached to the top plane. The z=0 plane contains ${\bf T}_i$ and y is parallel to ${\bf T}_1 - {\bf T}_2$.\\ \hline
${\bf B}_i$ & The base points of the tripod legs, in the Z=0 plane, written as sums of their centred values and translations along $X$ and $Y$ provided by two slides on each leg {\it i.e.} ${\bf B}_i={\bf B}^C_i+B^X_i {\bf \hat X}+B^Y_i {\bf \hat Y}$. \\ \hline
${\bf T}_i$ & The tops of the tripod legs, in the z=0 plane. \\ \hline
${\bf C}$ & A tooling point, placed at a fixed point $(C_x, C_y, C_z)$ in the ($xyz$) frame. \\ \hline
$\psi_i$ & The angle defining the orientation of the vector about which leg i is free to pivot, the angle through which the Y axis is rotated about the Z axis to give the pivot vector. \\ \hline
$\theta_i$ & The angle by which leg i is rotated about the Z axis to give the orientation of the leg. \\ \hline
$l_i$ & The fixed length of leg i. \\ \hline
$t_i$ & The fixed distance between points ${\bf T}_j$  and ${\bf T}_k$, where $i \neq j \neq k$. \\\hline
$\alpha_1$, $\alpha_2$ and $\alpha_3$ & The angles that define the orientation of the $(xyz)$ system with respect to the $(XYZ)$ system, by rotations about $X$, $Y$ and $Z$. \\ \hline
\end{tabular}
\end{center}
\caption{\label{tab:definitions} A table to show the definitions of all the parameters used in this report.}
\end{table}


\begin{figure}[h!]
\includegraphics[width=34pc]{tripod_sketch1.png}
\caption{\label{fig:sketch} A couple of sketches showing the tripod assembly from the top (left) and the position of one leg (right) and some of the vectors and lengths used for the present calculations.}
\end{figure}

In the Python implementation of these calculations, a class (tripod$\mathunderscore$class) is defined.
<%
try:
    import numpy as np
except:
    import scisoftpy as np
pi = np.pi

def norm(a):
    return np.sqrt(np.dot(a, a))

def cross(a, b):
    c = np.array([a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0]])
    return c


class tripod_class():
    '''
    Python class to carry out calculations for tripod with 6 base translations
    Needs NumPy
    Initialization arguments:
    l, t, psi:      Lists of l, t, psi values for each leg
    c:              x,y,z coordinates of tooling point relative to the top
    theta:          Approximate theta values (used for signs)
    BX,BY:         Lists X and Y coordinates for base positions [0,0,0],[0,0,0]
    Main user (public) methods:
    Typing object name (string representation) gives a summary of parameters
        and calculation of tooling point parameters from base vectors and back
    self.ctool((X1, X2, X3), (Y1, Y2, Y3) calculates tool parameters from
        X list (X values for each leg) and Y list;
        outputs coordinates of tooling point and tilt angles (degrees)
    self.cbase((CX, CY, CZ),(alpha1,alpha2,alpha3)) calculates base vectors for
        tooling point coordinates and angles (degrees)
    '''

    def __init__(self, l=[134.2, 134.2, 134.2], t=[219.129, 219.129, 84.963], psi=[-pi/3, pi/3, 0], c=[150.102, 84.9634/2, 35.7574], theta=[pi/4, pi/4, -pi/4], BX=[0.0, 0.0, 357.31303], BY=[249.32458, 0.0, 249.32458/2], P=[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], G=[0.0, 0.0, 0.0, 0.0, 0.0], H=[0.0, 0.0, 0.0, 0.0, 0.0], I=[0.0, 0.0, 0.0, 0.0, 0.0]):
        # l3 = 134.200007617 may reduce errors, as might t1=219.129002753.
        # Values of parameters when tripod is in 'zero position'.
        self.l, self.t, self.psi, self.c, self.theta, self.BX, self.BY, self.P, self.G, self.H, self.I = l, t, psi, c, theta, BX, BY, P, G, H, I
        self.X, self.Y = 0, 0  # Initial values of slides.

    def __repr__(self):
        rad_to_deg = 180.0/np.pi
        C, (alpha1, alpha2, alpha3) = self.ctool(self.X, self.Y)
        # Calculate top position and angles from base translations.
        X, Y = self._calcBXY(C, np.array([alpha1, alpha2, alpha3])*np.pi/180)
        # Reverse calculation (as a check).

        return '\nTripod parameters:\n\n' \
            + 'Leg lengths(l):\t\t %.5f, %.5f, %.5f\n' % tuple(self.l) \
            + 'Edge lengths(s):\t\t %.5f, %.5f, %.5f\n' % tuple(self.t) \
            + 'Hinge rotations (psi deg):\t %.5f, %.5f, %.5f\n' % tuple(np.array(self.psi)*rad_to_deg) \
            + 'Tool point xyz:\t\t %.5f, %.5f, %.5f\n' % tuple(self.c) \
            + 'Base X centres:\t\t %.5f, %.5f, %.5f\n' % tuple(self.BX) \
            + 'Base Y centres:\t\t %.5f, %.5f, %.5f\n' % tuple(self.BY) \
            + 'Approx. tilts (theta deg ):\t %.5f, %.5f, %.5f\n\n' % tuple(np.array(self.theta)*rad_to_deg) \
            + 'Slide X:\t\t\t %.5f, %.5f, %.5f\n' % tuple(self.X) \
            + 'Slide Y:\t\t\t %.5f, %.5f, %.5f\n' % tuple(self.Y) \
            + 'Tool point (C):\t\t %.5f, %.5f, %.5f\n' % tuple(C) \
            + 'Tool angles (alpha deg):\t %.5f, %.5f, %.5f\n' % (alpha1, alpha2, alpha3) \
            + 'Reverse calc Slide X:\t\t %.5f, %.5f, %.5f\n' % tuple(X) \
            + 'Reverse calc Slide Y:\t\t %.5f, %.5f, %.5f\n' % tuple(Y) \
%>
\subsection{Calculations 1: Top plate position and orientation}
\label{subsec:calcs1}

First, the top base vectors ${\bf T}_i$ are calculated from known bottom base vectors ${\bf B}_i$ by ensuring that the distances $t_i$ are correct. Before doing this, it is convenient to write the top vectors as the sum of the bottom vector and a vector linking the two, which in turn depends on the rotation angles $\psi_i$ (known and fixed) and $\theta_i$ (unknown):
\begin{equation}
{\mathbf T}_i={\mathbf B}_i+{\mathbf v}_i l_i
\label{eq:TB}
\end{equation}
where
\begin{eqnarray}
{\mathbf v}_i &=& R_Z(\psi_i) R_Y(\theta_i) \, {\mathbf {\hat Z}} \nonumber \\
&=& 
\left( 
\begin{array}{ccc}
\cos \psi_i & - \sin \psi_i & 0 \\
\sin \psi_i & \cos \psi_i & 0 \\
0 & 0 & 1 
\end{array} 
\right)
\left( 
\begin{array}{ccc}
\cos \theta_i & 0 & \sin \theta_i \\
0 & 1 & 0 \\
-\sin \theta_i & 0 & \cos \theta_i
\end{array} 
\right)
\left( 
\begin{array}{c}
0 \\
0 \\
1 
\end{array} 
\right) \nonumber \\
&=& 
\left( 
\begin{array}{c}
\cos \psi_i \sin \theta_i \\
\sin \psi_i \sin \theta_i \\
\cos \theta_i 
\end{array} 
\right)
\label{eq:v}
\end{eqnarray}
Ensuring that the distances between the top vectors are correct gives a set of three quadratic equations:
\begin{eqnarray}
| {\mathbf T}_2- {\mathbf T}_1 |^2 - t_3^{\,2} & = & 0 \nonumber \\
| {\mathbf T}_1- {\mathbf T}_3 |^2 - t_2^{\,2} & = & 0 \nonumber \\
| {\mathbf T}_3- {\mathbf T}_2 |^2 - t_1^{\,2} & = & 0
\label{eq:symeq}
\end{eqnarray}
the solutions of which give $\theta_i$, which in turn can be used to calculate ${\mathbf {\hat v}}_i$ and ${\mathbf T}_i$. It important to note that there are two solutions for each leg, corresponding to $\pm \theta$, so it is essential to ensure that the correct solution is adopted.

\subsubsection{Solving Eqns.~\ref{eq:symeq} analytically}
\label{subsubsec:solvingtheta}
Eqns.~\ref{eq:symeq} are hard to solve analytically, as they are non-linear and contain both $\cos\theta_i$ and $\sin\theta_i$ terms when they are multiplied out. One way of solving them is to use a 'brute-force' numerical solver such as the fsolve function found in SciPy's Optimize package. However, in order for the calculations to be implemented in the Jython programming language used to control the experiments on beamline I16, it is necessary to obtain solutions that are analytic or at least do not rely on the use of a 'brute-force' numerical solver. As the tripod is isomorphic to the Stewart platform, solutions can be obtained via solutions that have already been found for a 6-3 Stewart platform \cite{Varanyuwatana14,Nanua90,BenHorin99}.

In the following mathematical analysis, the variable $D_1$ has been implemented in the Python code as $D1$ and so on. Any greek letters have been implemented using their full names, so for example $\theta_1$ has been implemented as theta$1$.

\subsubsection*{Setting up the equations}
It is convenient to make the substitution $\phi_i=\pi/2 - \theta_i$ for $i = 1,2,3$, and with this, expanding and simplifying (using the identity $\cos^2\phi_i+\sin^2\phi_i = 1$) Eqns.~\ref{eq:symeq} gives the following equations:
\begin{eqnarray}
D_1\cos\phi_1 + D_2\cos\phi_2 + D_3\cos\phi_1\cos\phi_2 + D_4\sin\phi_1\sin\phi_2 + D_5 & = & 0 \nonumber \\
E_1\cos\phi_2 + E_2\cos\phi_3 + E_3\cos\phi_2\cos\phi_3 + E_4\sin\phi_2\sin\phi_3 + E_5 & = & 0 \nonumber \\
F_1\cos\phi_3 + F_2\cos\phi_1 + F_3\cos\phi_3\cos\phi_1+ F_4\sin\phi_3\sin\phi_1 + F_5 & = & 0
\label{eq:expanded}
\end{eqnarray}
with coefficients:
\begin{eqnarray}
D_1 & = & -2l_1((B_{2X}-B_{1X})\cos\psi_1 + (B_{2Y}-B_{1Y})\sin\psi_1) \nonumber \\
D_2 & = & 2l_2((B_{2X}-B_{1X})\cos\psi_2 + (B_{2Y}-B_{1Y})\sin\psi_2) \nonumber \\
D_3 & = & -2l_1l_2(\cos\psi_1\cos\psi_2+\sin\psi_1\sin\psi_2) \nonumber \\
D_4 & = & -2l_1l_2\nonumber \\
D_5 & = & (B_{2X}-B_{1X})^2 + (B_{2Y}-B_{1Y})^2 + l_1^2 + l_2^2 - t_3^2 \nonumber \\
E_1 & = &  -2l_2((B_{3X}-B_{2X})\cos\psi_2+(B_{3Y}-B_{2Y})\sin\psi_2)\nonumber \\
E_2 & = &  2l_3((B_{3X}-B_{2X})\cos\psi_3 + (B_{3Y}-B_{2Y})\sin\psi_3)\nonumber \\
E_3 & = &  -2l_2l_3(\cos\psi_2\cos\psi_3+\sin\psi_2\sin\psi_3)\nonumber \\
E_4 & = &  -2l_2l_3\nonumber \\
E_5 & = &  (B_{3X}-B_{2X})^2 + (B_{3Y}-B_{2Y})^2 + l_2^2+l_3^2-t_1^2\nonumber \\
F_1 & = & -2l_3((B_{1X}-B_{3X})\cos\psi_3 + (B_{1Y}-B_{3Y})\sin\psi_3) \nonumber \\
F_2 & = &  2l_1((B_{1X}-B_{3X})\cos\psi_1+(B_{1Y}-B_{3Y})\sin\psi_1) \nonumber \\
F_3 & = &  -2l_1l_3(\cos\psi_1\cos\psi_3 + \sin\psi_1\sin\psi_3)\nonumber \\
F_4 & = &  -2l_1l_3\nonumber \\
F_5 & = & (B_{1X}-B_{3X})^2+(B_{1Y}-B_{3Y})^2 + l_1^2 + l_3^2 - t_2^2
\label{eq:coeffs}
\end{eqnarray}
These equations can be solved by making tan substitutions, so that there are only three variables to solve for ($x_1, x_2$ and $x_3$):
\begin{eqnarray}
\cos\phi_i & = & \frac{1-x_i^2}{1+x_i^2} \nonumber \\
\sin\phi_i & = & \frac{2x_i}{1+x_i^2}
\label{eq:tansubs}
\end{eqnarray}
with $x_i=\tan(\frac{\phi_i}{2})$.
\newline Simplification gives another set of equations:
\begin{subequations}\label{eq:subeqns_ghi}
\begin{align}
(G_1x_1^2+G_2)x_2^2 + G_3x_1x_2 + (G_4x_1^2+G_5) & = 0 \label{eq:subeq_ghi1}\\
(H_1x_3^2+H_4)x_2^2 + H_3x_3x_2 + (H_2x_3^2+H_5) & = 0 \label{eq:subeq_ghi2}\\
(I_1x_1^2+I_4)x_3^2 + I_3x_1x_3 + (I_2x_1^2+I_5) & = 0 \label{eq:subeq_ghi3}
\end{align}
\end{subequations}
with
\begin{eqnarray}
G_1 & = & -D_1 -D_2 +D_3+D_5 \nonumber \\
G_2 & = & D_1 -D_2 -D_3+D_5 \nonumber \\
G_3 & = & 4D_4 \nonumber \\
G_4 & = & -D_1 +D_2 -D_3+D_5 \nonumber \\
G_5 & = & D_1 +D_2 +D_3+D_5
\label{eq:gcoeffs}
\end{eqnarray}
The expressions for the $H_i$ and $I_i$ are the same, but with corresponding variables $E_i$ and $F_i$
\subsubsection*{Bezout elimination}
The equations~\eqref{eq:subeq_ghi1} and~\eqref{eq:subeq_ghi2}  can be solved simultaneously to eliminate $x_2$ via Bezout's elimination method \cite{Salmon64} to give an equation that only contains $x_1$ and $x_3$ terms: \\ 
\begin{equation}
\begin{vmatrix}
\begin{vmatrix}
G_1x_1^2 + G_2 & G_4x_1^2+G_5 \\
H_1x_3^2 + H_4 & H_2x_3^2+H_5
\end{vmatrix} & 
\begin{vmatrix}
H_3x_3 & G_3x_1 \\
H_1x_3^2 + H_4 & G_1x_1^2+ G_2
\end{vmatrix} \\
\begin{vmatrix}
G_3x_1 & G_4x_1^2+G_5 \\
H_3x_3 & H_2x_3^2+H_5
\end{vmatrix} & 
\begin{vmatrix}
G_1x_1^2+G_2 & G_4x_1^2+G_5 \\
H_1x_3^2+H_4 & H_2x_3^2+H_5
\end{vmatrix}
\end{vmatrix} = 0
\end{equation}
After expansion and simplification of the determinant, the solution of this system is a 4th order polynomial
\begin{equation}
J_1x_3^4+J_2x_3^3+J_3x_3^2+J_4x_3+J_5=0
\label{eq:jpoly}
\end{equation}
where
\begin{eqnarray}
J_1 & = & K_1x_1^4+K_2x_1^2+K_3 \nonumber \\
J_2 & = & K_4 x_1^3 + K_5 x_1 \nonumber \\
J_3 & = & K_6x_1^4+K_7x_1^2+K_8 \nonumber \\
J_4 & = & K_9x_1^3 + K_{10}x_1 \nonumber \\
J_5 & = & K_{11}x_1^4+K_{12}x_1^2+K_{13}
\label{eq:jcoeffs}
\end{eqnarray}
where the $K_i$ are functions of the $G_i$ and $H_i$:
\begin{eqnarray}
K_1 & = & G_1^2H_2^2 - 2G_1G_4H_1H_2+G_4^2H_1^2 \nonumber \\
K_2 & = & 2G_1G_2H_2^2-2G_1G_5H_1H_2 - 2G_2G_4H_1H_2 + 2G_4G_5H_1^2 + G_3^2H_1H_2 \nonumber \\
K_3 & = & G_2^2H_2^2-2G_2G_5H_1H_2+G_5^2H_1^2  \nonumber \\
K_4 & = & -G_1G_3H_2H_3 - G_3G_4H_1H_3 \nonumber \\
K_5 & = &  -G_2G_3H_2H_3-G_3G_5H_1H_3\nonumber \\
K_6 & = & 2G_1^2H_2H_5-2G_1G_4H_2H_4-2G_1G_4H_1H_5+2G_4^2H_1H_4+G_1G_4H_3^2 \nonumber \\
K_7 & = & 4G_1G_2H_2H_5-2G_1G_5H_2H_4-2G_1G_5H_1H_5-2G_2G_4H_2H_4-2G_2G_4H_1H_5 \nonumber \\ && +4G_4G_5H_1H_4+G_3^2H_2H_4+G_3^2H_1H_5+G_2G_4H_3^2+G_1G_5H_3^2 \nonumber \\
K_8 & = & 2G_2^2H_2H_5-2G_2G_5H_2H_4-2G_2G_5H_1H_5+2G_5^2H_1H_4+G_2G_5H_3^2 \nonumber \\
K_9 & = & -G_1G_3H_3H_5-G_3G_4H_3H_4 \nonumber \\
K_{10} & = & -G_2G_3H_3H_5 - G_3G_5H_3H_4 \nonumber \\
K_{11} & = &  G_1^2H_5^2 - 2G_1G_4H_4H_5 + G_4^2H_4^2 \nonumber \\
K_{12} & = & 2G_1G_2H_5^2-2G_1G_5H_4H_5-2G_2G_4H_4H_5 +2G_4G_5H_4^2 + G_3^2H_4H_5 \nonumber \\
K_{13} & = & G_2^2H_5^2-2G_2G_5H_4H_5 + G_5^2H_4^2
\label{eq:kcoeffs}
\end{eqnarray}
The equation~\eqref{eq:subeq_ghi3} can be rewritten as
\begin{equation}
M_1x_3^2+M_2x_3+M_3=0
\label{eq:mpoly}
\end{equation}
where
\begin{eqnarray}
M_1 &=& I_1x_1^2+I_4 \nonumber \\
M_2 &=& I_3x_1\nonumber \\
M_3 &=& I_2x_1^2+I_5\nonumber \\
\label{eq:mcoeffs}
\end{eqnarray}
and applying a variant of Bezout elimination, as the polynomials are of different degrees \cite{Salmon64}
\begin{equation}
\begin{vmatrix}
J_2M_1-J_1M_2 & J_3M_1-J_1M_3 & J_4M_1 & J_5M_1 \\
J_3M_1-J_1M_3 & J_3M_2-J_2M_3+J_4M_1 &  J_4M_2+J_5M_1 & J_5M_2 \\
M_1 & M_2 & M_3 & 0 \\
0 & M_1 & M_2 & M_3
\end{vmatrix} = 0
\label{eq:jmmatrix}
\end{equation}
\subsubsection*{Solving the resultant polynomial}
On simplification a 16th order polynomial quadratic equation (which reduces to an 8th order polynomial via the substitution $y = x_1^2$) is obtained:
\begin{equation}
P_{16}x_1^{16} + P_{14}x_1^{14} + P_{12} x_1^{12} + P_{10}x_1^{10}+P_8x_1^8+P_6x_1^6+P_4x_1^4+P_2x_1^2+P_0=0
\label{eq:poly}
\end{equation}
The coefficients $P_i$ are functions of the $K_i$ and the $I_i$. The polynomial was automatically generated using Sage, with the input:
\begin{lstlisting}
x1,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,I1,I2,I3,I4,I5=var('x1,K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,I1,I2,I3,I4,I5')
m=Matrix1([[(K4*x1^3+K5*x1)*(I1*x1^2+I4)-(K1*x1^4+K2*x1^2+K3)*(I3*x1),(K6*x1^4+K7*x1^2+K8)*(I1*x1^2+I4)-(K1*x1^4+K2*x1^2+K3)*(I2*x1^2+I5),(K9*x1^3+K10*x1)*(I1*x1^2+I4),(K11*x1^4+K12*x1^2+K13)*(I1*x1^2+I4)],[(K6*x1^4+K7*x1^2+K8)*(I1*x1^2+I4)-(K1*x1^4+K2*x1^2+K3)*(I2*x1^2+I5),(K6*x1^4+K7*x1^2+K8)*(I3*x1)-(K4*x1^3+K5*x1)*(I2*x1^2+I5)+(K9*x1^3+K10*x1)*(I1*x1^2+I4),(K9*x1^3+K10*x1)*(I3*x1)+(K11*x1^4+K12*x1^2+K13)*(I1*x1^2+I4),(K11*x1^4+K12*x1^2+K13)*(I3*x1)],[(I1*x1^2+I4),(I3*x1),(I2*x1^2+I5),0],[0,(I1*x1^2+I4),(I3*x1),(I2*x1^2+I5)]])
poly=det(m)
poly
\end{lstlisting}
This was then adapted by replacing \textasciicircum \hspace{0.05mm} with ** to make the output suitable for use with Python.
\\The full expansion of the polynomial can be found in Appendix~\ref{app:polyx1}.
\\This equation can then be solved in principle to give possible values of $x_1$. From constraints of the tripod, it is known that $\theta_i \approx \phi_i \approx \frac{\pi}{4}$ so the desired value of $x_1$ can be determined as $ x_1 \approx \tan \frac{\pi}{8} \approx 0.414$.
\\From this, the value of $\phi_1$ and hence the value of $\theta_1$ can be determined as 
\begin{equation}
\phi_1=2\tan^{-1} x_1
\label{eq:phi1}
\end{equation}
and $x_1$ can then be substituted back into equations~\eqref{eq:subeq_ghi1} and~\eqref{eq:subeq_ghi3} to determine the values of $\theta_2$ and $\theta_3$, using the knowledge that $\theta_2 \approx \frac{\pi}{4}$ and $\theta_3 \approx -\frac{\pi}{4}$. The values of $\theta_2$ and $\theta_3$ obtained can be checked by substitution back into Equation~\eqref{eq:subeq_ghi2}.
<%
def _calcThetafromB(self, B, psi1, psi2, psi3, l1, l2, l3, t1, t2, t3, X, Y):
        # Calculates leg tilt angles (see documentation).
        # Uses Numpy's roots solver, a variant of which has been created in dnp.
        # The solver solves the 8th order polynomial in x**2 that results.
        B1 = B[0]
        B2 = B[1]
        B3 = B[2]
        B1X, B1Y = B1[0], B1[1]
        B2X, B2Y = B2[0], B2[1]
        B3X, B3Y = B3[0], B3[1]

        def calc_parameters(B1X, B1Y, B2X, B2Y, B3X, B3Y, psi1, psi2, psi3, l1, l2, l3, t1, t2, t3):
            # All params: theta1, theta2, theta3, B1X, B1Y, B2X, B2Y, B3X, B3Y, psi1, psi2, psi3, l1, l2, 3, t1, t2, t3.
            # Calculates parameters as described in report and documentation.
            D1 = (-2*l1*((B2X-B1X)*np.cos(psi1) + (B2Y-B1Y)*np.sin(psi1)))
            D2 = (2*l2*((B2X-B1X)*np.cos(psi2) + (B2Y-B1Y)*np.sin(psi2)))
            D3 = -2*l1*l2*(np.cos(psi1)*np.cos(psi2)+np.sin(psi1)*np.sin(psi2))
            D4 = (-2*l1*l2)
            D5 = ((B2X-B1X)**2 + (B2Y-B1Y)**2 + l1**2 + l2**2 - t3**2)
            E1 = (-2*l2*((B3X-B2X)*np.cos(psi2)+(B3Y-B2Y)*np.sin(psi2)))
            E2 = (2*l3*((B3X-B2X)*np.cos(psi3) + (B3Y-B2Y)*np.sin(psi3)))
            E3 = -2*l2*l3*(np.cos(psi2)*np.cos(psi3)+np.sin(psi2)*np.sin(psi3))
            E4 = -2*l2*l3
            E5 = ((B3X-B2X)**2 + (B3Y-B2Y)**2 + l2**2+l3**2-t1**2)
            F1 = (-2*l3*((B1X-B3X)*np.cos(psi3) + (B1Y-B3Y)*np.sin(psi3)))
            F2 = (2*l1*((B1X-B3X)*np.cos(psi1)+(B1Y-B3Y)*np.sin(psi1)))
            F3 = -2*l1*l3*(np.cos(psi1)*np.cos(psi3)+np.sin(psi1)*np.sin(psi3))
            F4 = (-2*l1*l3)
            F5 = ((B1X-B3X)**2+(B1Y-B3Y)**2 + l1**2 + l3**2 - t2**2)
            G1 = -D1-D2+D3+D5
            G2 = D1-D2-D3+D5
            G3 = 4*D4
            G4 = -D1+D2-D3+D5
            G5 = D1+D2+D3+D5
            H1 = -E1-E2+E3+E5
            H2 = E1-E2-E3+E5
            H3 = 4*E4
            H4 = -E1+E2-E3+E5
            H5 = E1+E2+E3+E5
            I1 = -F1-F2+F3+F5
            I2 = F1-F2-F3+F5
            I3 = 4*F4
            I4 = -F1+F2-F3+F5
            I5 = F1+F2+F3+F5
            K1 = (G1**2)*(H2**2)-2*G1*G4*H1*H2+(G4**2)*(H1**2)
            K2 = 2*G1*G2*(H2**2)-2*G1*G5*H1*H2-2*G2*G4*H1*H2+2*G4*G5*(H1**2)+(G3**2)*H1*H2
            K3 = (G2**2)*(H2**2)-2*G2*G5*H1*H2+(G5**2)*(H1**2)
            K4 = -G1*G3*H2*H3-G3*G4*H1*H3
            K5 = -G2*G3*H2*H3-G3*G5*H1*H3
            K6 = 2*(G1**2)*H2*H5-2*G1*G4*H2*H4-2*G1*G4*H1*H5+2*(G4**2)*H1*H4+G1*G4*(H3**2)
            K7 = 4*G1*G2*H2*H5-2*G1*G5*H2*H4-2*G1*G5*H1*H5-2*G2*G4*H2*H4-2*G2*G4*H1*H5+4*G4*G5*H1*H4+(G3**2)*H2*H4 +(G3**2)*H1*H5+G2*G4*(H3**2)+G1*G5*(H3**2)
            K8 = 2*(G2**2)*H2*H5-2*G2*G5*H2*H4-2*G2*G5*H1*H5+2*H1*H4*(G5**2)+G2*G5*(H3**2)
            K9 = -G1*G3*H3*H5-G3*G4*H3*H4
            K10 = -G2*G3*H3*H5-G3*G5*H3*H4
            K11 = (G1**2)*(H5**2)-2*G1*G4*H4*H5+(G4**2)*(H4**2)
            K12 = 2*G1*G2*(H5**2)-2*G1*G5*H4*H5-2*G2*G4*H4*H5+2*G4*G5*(H4**2)+(G3**2)*H4*H5
            K13 = (G2**2)*(H5**2)-2*G2*G5*H4*H5+(G5**2)*(H4**2)
            P16 = (-I2**4*K1**2-2*I1**2*I2**2*K1*K11-I1**4*K11**2+2*I1*I2**3*K1*K6+2*I1**3*I2*K11*K6-I1**2*I2**2*K6**2)
            P14 = (-4*I2**3*I5*K1**2+4*I1*I2*I3**2*K1*K11-4*I1*I2**2*I4*K1*K11-4*I1**2*I2*I5*K1*K11-4*I1**3*I4*K11**2-2*I1**2*I2**2*K1*K12-2*I1**4*K11*K12-2*I2**4*K1*K2-2*I1**2*I2**2*K11*K2+I2**3*I3*K1*K4-3*I1**2*I2*I3*K11*K4-I1*I2**3*K4**2-I2**2*I3**2*K1*K6+2*I2**3*I4*K1*K6+6*I1*I2**2*I5*K1*K6-I1**2*I3**2*K11*K6+6*I1**2*I2*I4*K11*K6+2*I1**3*I5*K11*K6+2*I1**3*I2*K12*K6+2*I1*I2**3*K2*K6+I1*I2**2*I3*K4*K6-2*I1*I2**2*I4*K6**2-2*I1**2*I2*I5*K6**2+2*I1*I2**3*K1*K7+2*I1**3*I2*K11*K7-2*I1**2*I2**2*K6*K7-3*I1*I2**2*I3*K1*K9+I1**3*I3*K11*K9+2*I1**2*I2**2*K4*K9+I1**2*I2*I3*K6*K9-I1**3*I2*K9**2)
            P12 = (-6*I2**2*I5**2*K1**2-3*I1*I2**2*I3*K1*K10-I3**4*K1*K11+4*I2*I3**2*I4*K1*K11-2*I2**2*I4**2*K1*K11+4*I1*I3**2*I5*K1*K11-8*I1*I2*I4*I5*K1*K11-2*I1**2*I5**2*K1*K11+I1**3*I3*K10*K11-6*I1**2*I4**2*K11**2+4*I1*I2*I3**2*K1*K12-4*I1*I2**2*I4*K1*K12-4*I1**2*I2*I5*K1*K12-8*I1**3*I4*K11*K12-I1**4*K12**2-2*I1**2*I2**2*K1*K13-2*I1**4*K11*K13-8*I2**3*I5*K1*K2+4*I1*I2*I3**2*K11*K2-4*I1*I2**2*I4*K11*K2-4*I1**2*I2*I5*K11*K2-2*I1**2*I2**2*K12*K2-I2**4*K2**2-2*I2**4*K1*K3-2*I1**2*I2**2*K11*K3+3*I2**2*I3*I5*K1*K4+2*I1**2*I2**2*K10*K4+I1*I3**3*K11*K4-6*I1*I2*I3*I4*K11*K4-3*I1**2*I3*I5*K11*K4-3*I1**2*I2*I3*K12*K4+I2**3*I3*K2*K4-I2**3*I4*K4**2-3*I1*I2**2*I5*K4**2+I2**3*I3*K1*K5-3*I1**2*I2*I3*K11*K5-2*I1*I2**3*K4*K5-2*I2*I3**2*I5*K1*K6+6*I2**2*I4*I5*K1*K6+6*I1*I2*I5**2*K1*K6+I1**2*I2*I3*K10*K6-2*I1*I3**2*I4*K11*K6+6*I1*I2*I4**2*K11*K6+6*I1**2*I4*I5*K11*K6-I1**2*I3**2*K12*K6+6*I1**2*I2*I4*K12*K6+2*I1**3*I5*K12*K6+2*I1**3*I2*K13*K6-I2**2*I3**2*K2*K6+2*I2**3*I4*K2*K6+6*I1*I2**2*I5*K2*K6+2*I1*I2**3*K3*K6+I2**2*I3*I4*K4*K6+2*I1*I2*I3*I5*K4*K6+I1*I2**2*I3*K5*K6-I2**2*I4**2*K6**2-4*I1*I2*I4*I5*K6**2-I1**2*I5**2*K6**2-I2**2*I3**2*K1*K7+2*I2**3*I4*K1*K7+6*I1*I2**2*I5*K1*K7-I1**2*I3**2*K11*K7+6*I1**2*I2*I4*K11*K7+2*I1**3*I5*K11*K7+2*I1**3*I2*K12*K7+2*I1*I2**3*K2*K7+I1*I2**2*I3*K4*K7-4*I1*I2**2*I4*K6*K7-4*I1**2*I2*I5*K6*K7-I1**2*I2**2*K7**2+2*I1*I2**3*K1*K8+2*I1**3*I2*K11*K8-2*I1**2*I2**2*K6*K8+I2*I3**3*K1*K9-3*I2**2*I3*I4*K1*K9-6*I1*I2*I3*I5*K1*K9-2*I1**3*I2*K10*K9+3*I1**2*I3*I4*K11*K9+I1**3*I3*K12*K9-3*I1*I2**2*I3*K2*K9-I1*I2*I3**2*K4*K9+4*I1*I2**2*I4*K4*K9+4*I1**2*I2*I5*K4*K9+2*I1**2*I2**2*K5*K9+2*I1*I2*I3*I4*K6*K9+I1**2*I3*I5*K6*K9+I1**2*I2*I3*K7*K9-3*I1**2*I2*I4*K9**2-I1**3*I5*K9**2)
            P10 = (-4*I2*I5**3*K1**2+I2*I3**3*K1*K10-3*I2**2*I3*I4*K1*K10-6*I1*I2*I3*I5*K1*K10-I1**3*I2*K10**2+4*I3**2*I4*I5*K1*K11-4*I2*I4**2*I5*K1*K11-4*I1*I4*I5**2*K1*K11+3*I1**2*I3*I4*K10*K11-4*I1*I4**3*K11**2-I3**4*K1*K12+4*I2*I3**2*I4*K1*K12-2*I2**2*I4**2*K1*K12+4*I1*I3**2*I5*K1*K12-8*I1*I2*I4*I5*K1*K12-2*I1**2*I5**2*K1*K12+I1**3*I3*K10*K12-12*I1**2*I4**2*K11*K12-4*I1**3*I4*K12**2+4*I1*I2*I3**2*K1*K13-4*I1*I2**2*I4*K1*K13-4*I1**2*I2*I5*K1*K13-8*I1**3*I4*K11*K13-2*I1**4*K12*K13-12*I2**2*I5**2*K1*K2-3*I1*I2**2*I3*K10*K2-I3**4*K11*K2+4*I2*I3**2*I4*K11*K2-2*I2**2*I4**2*K11*K2+4*I1*I3**2*I5*K11*K2-8*I1*I2*I4*I5*K11*K2-2*I1**2*I5**2*K11*K2+4*I1*I2*I3**2*K12*K2-4*I1*I2**2*I4*K12*K2-4*I1**2*I2*I5*K12*K2-2*I1**2*I2**2*K13*K2-4*I2**3*I5*K2**2-8*I2**3*I5*K1*K3+4*I1*I2*I3**2*K11*K3-4*I1*I2**2*I4*K11*K3-4*I1**2*I2*I5*K11*K3-2*I1**2*I2**2*K12*K3-2*I2**4*K2*K3+3*I2*I3*I5**2*K1*K4-I1*I2*I3**2*K10*K4+4*I1*I2**2*I4*K10*K4+4*I1**2*I2*I5*K10*K4+I3**3*I4*K11*K4-3*I2*I3*I4**2*K11*K4-6*I1*I3*I4*I5*K11*K4+I1*I3**3*K12*K4-6*I1*I2*I3*I4*K12*K4-3*I1**2*I3*I5*K12*K4-3*I1**2*I2*I3*K13*K4+3*I2**2*I3*I5*K2*K4+I2**3*I3*K3*K4-3*I2**2*I4*I5*K4**2-3*I1*I2*I5**2*K4**2+3*I2**2*I3*I5*K1*K5+2*I1**2*I2**2*K10*K5+I1*I3**3*K11*K5-6*I1*I2*I3*I4*K11*K5-3*I1**2*I3*I5*K11*K5-3*I1**2*I2*I3*K12*K5+I2**3*I3*K2*K5-2*I2**3*I4*K4*K5-6*I1*I2**2*I5*K4*K5-I1*I2**3*K5**2-I3**2*I5**2*K1*K6+6*I2*I4*I5**2*K1*K6+2*I1*I5**3*K1*K6+2*I1*I2*I3*I4*K10*K6+I1**2*I3*I5*K10*K6-I3**2*I4**2*K11*K6+2*I2*I4**3*K11*K6+6*I1*I4**2*I5*K11*K6-2*I1*I3**2*I4*K12*K6+6*I1*I2*I4**2*K12*K6+6*I1**2*I4*I5*K12*K6-I1**2*I3**2*K13*K6+6*I1**2*I2*I4*K13*K6+2*I1**3*I5*K13*K6-2*I2*I3**2*I5*K2*K6+6*I2**2*I4*I5*K2*K6+6*I1*I2*I5**2*K2*K6-I2**2*I3**2*K3*K6+2*I2**3*I4*K3*K6+6*I1*I2**2*I5*K3*K6+2*I2*I3*I4*I5*K4*K6+I1*I3*I5**2*K4*K6+I2**2*I3*I4*K5*K6+2*I1*I2*I3*I5*K5*K6-2*I2*I4**2*I5*K6**2-2*I1*I4*I5**2*K6**2-2*I2*I3**2*I5*K1*K7+6*I2**2*I4*I5*K1*K7+6*I1*I2*I5**2*K1*K7+I1**2*I2*I3*K10*K7-2*I1*I3**2*I4*K11*K7+6*I1*I2*I4**2*K11*K7+6*I1**2*I4*I5*K11*K7-I1**2*I3**2*K12*K7+6*I1**2*I2*I4*K12*K7+2*I1**3*I5*K12*K7+2*I1**3*I2*K13*K7-I2**2*I3**2*K2*K7+2*I2**3*I4*K2*K7+6*I1*I2**2*I5*K2*K7+2*I1*I2**3*K3*K7+I2**2*I3*I4*K4*K7+2*I1*I2*I3*I5*K4*K7+I1*I2**2*I3*K5*K7-2*I2**2*I4**2*K6*K7-8*I1*I2*I4*I5*K6*K7-2*I1**2*I5**2*K6*K7-2*I1*I2**2*I4*K7**2-2*I1**2*I2*I5*K7**2-I2**2*I3**2*K1*K8+2*I2**3*I4*K1*K8+6*I1*I2**2*I5*K1*K8-I1**2*I3**2*K11*K8+6*I1**2*I2*I4*K11*K8+2*I1**3*I5*K11*K8+2*I1**3*I2*K12*K8+2*I1*I2**3*K2*K8+I1*I2**2*I3*K4*K8-4*I1*I2**2*I4*K6*K8-4*I1**2*I2*I5*K6*K8-2*I1**2*I2**2*K7*K8+I3**3*I5*K1*K9-6*I2*I3*I4*I5*K1*K9-3*I1*I3*I5**2*K1*K9-6*I1**2*I2*I4*K10*K9-2*I1**3*I5*K10*K9+3*I1*I3*I4**2*K11*K9+3*I1**2*I3*I4*K12*K9+I1**3*I3*K13*K9+I2*I3**3*K2*K9-3*I2**2*I3*I4*K2*K9-6*I1*I2*I3*I5*K2*K9-3*I1*I2**2*I3*K3*K9-I2*I3**2*I4*K4*K9+2*I2**2*I4**2*K4*K9-I1*I3**2*I5*K4*K9+8*I1*I2*I4*I5*K4*K9+2*I1**2*I5**2*K4*K9-I1*I2*I3**2*K5*K9+4*I1*I2**2*I4*K5*K9+4*I1**2*I2*I5*K5*K9+I2*I3*I4**2*K6*K9+2*I1*I3*I4*I5*K6*K9+2*I1*I2*I3*I4*K7*K9+I1**2*I3*I5*K7*K9+I1**2*I2*I3*K8*K9-3*I1*I2*I4**2*K9**2-3*I1**2*I4*I5*K9**2)
            P8 = (-I5**4*K1**2+I3**3*I5*K1*K10-6*I2*I3*I4*I5*K1*K10-3*I1*I3*I5**2*K1*K10-3*I1**2*I2*I4*K10**2-I1**3*I5*K10**2-2*I4**2*I5**2*K1*K11+3*I1*I3*I4**2*K10*K11-I4**4*K11**2+4*I3**2*I4*I5*K1*K12-4*I2*I4**2*I5*K1*K12-4*I1*I4*I5**2*K1*K12+3*I1**2*I3*I4*K10*K12-8*I1*I4**3*K11*K12-6*I1**2*I4**2*K12**2-I3**4*K1*K13+4*I2*I3**2*I4*K1*K13-2*I2**2*I4**2*K1*K13+4*I1*I3**2*I5*K1*K13-8*I1*I2*I4*I5*K1*K13-2*I1**2*I5**2*K1*K13+I1**3*I3*K10*K13-12*I1**2*I4**2*K11*K13-8*I1**3*I4*K12*K13-I1**4*K13**2-8*I2*I5**3*K1*K2+I2*I3**3*K10*K2-3*I2**2*I3*I4*K10*K2-6*I1*I2*I3*I5*K10*K2+4*I3**2*I4*I5*K11*K2-4*I2*I4**2*I5*K11*K2-4*I1*I4*I5**2*K11*K2-I3**4*K12*K2+4*I2*I3**2*I4*K12*K2-2*I2**2*I4**2*K12*K2+4*I1*I3**2*I5*K12*K2-8*I1*I2*I4*I5*K12*K2-2*I1**2*I5**2*K12*K2+4*I1*I2*I3**2*K13*K2-4*I1*I2**2*I4*K13*K2-4*I1**2*I2*I5*K13*K2-6*I2**2*I5**2*K2**2-12*I2**2*I5**2*K1*K3-3*I1*I2**2*I3*K10*K3-I3**4*K11*K3+4*I2*I3**2*I4*K11*K3-2*I2**2*I4**2*K11*K3+4*I1*I3**2*I5*K11*K3-8*I1*I2*I4*I5*K11*K3-2*I1**2*I5**2*K11*K3+4*I1*I2*I3**2*K12*K3-4*I1*I2**2*I4*K12*K3-4*I1**2*I2*I5*K12*K3-2*I1**2*I2**2*K13*K3-8*I2**3*I5*K2*K3-I2**4*K3**2+I3*I5**3*K1*K4-I2*I3**2*I4*K10*K4+2*I2**2*I4**2*K10*K4-I1*I3**2*I5*K10*K4+8*I1*I2*I4*I5*K10*K4+2*I1**2*I5**2*K10*K4-3*I3*I4**2*I5*K11*K4+I3**3*I4*K12*K4-3*I2*I3*I4**2*K12*K4-6*I1*I3*I4*I5*K12*K4+I1*I3**3*K13*K4-6*I1*I2*I3*I4*K13*K4-3*I1**2*I3*I5*K13*K4+3*I2*I3*I5**2*K2*K4+3*I2**2*I3*I5*K3*K4-3*I2*I4*I5**2*K4**2-I1*I5**3*K4**2+3*I2*I3*I5**2*K1*K5-I1*I2*I3**2*K10*K5+4*I1*I2**2*I4*K10*K5+4*I1**2*I2*I5*K10*K5+I3**3*I4*K11*K5-3*I2*I3*I4**2*K11*K5-6*I1*I3*I4*I5*K11*K5+I1*I3**3*K12*K5-6*I1*I2*I3*I4*K12*K5-3*I1**2*I3*I5*K12*K5-3*I1**2*I2*I3*K13*K5+3*I2**2*I3*I5*K2*K5+I2**3*I3*K3*K5-6*I2**2*I4*I5*K4*K5-6*I1*I2*I5**2*K4*K5-I2**3*I4*K5**2-3*I1*I2**2*I5*K5**2+2*I4*I5**3*K1*K6+I2*I3*I4**2*K10*K6+2*I1*I3*I4*I5*K10*K6+2*I4**3*I5*K11*K6-I3**2*I4**2*K12*K6+2*I2*I4**3*K12*K6+6*I1*I4**2*I5*K12*K6-2*I1*I3**2*I4*K13*K6+6*I1*I2*I4**2*K13*K6+6*I1**2*I4*I5*K13*K6-I3**2*I5**2*K2*K6+6*I2*I4*I5**2*K2*K6+2*I1*I5**3*K2*K6-2*I2*I3**2*I5*K3*K6+6*I2**2*I4*I5*K3*K6+6*I1*I2*I5**2*K3*K6+I3*I4*I5**2*K4*K6+2*I2*I3*I4*I5*K5*K6+I1*I3*I5**2*K5*K6-I4**2*I5**2*K6**2-I3**2*I5**2*K1*K7+6*I2*I4*I5**2*K1*K7+2*I1*I5**3*K1*K7+2*I1*I2*I3*I4*K10*K7+I1**2*I3*I5*K10*K7-I3**2*I4**2*K11*K7+2*I2*I4**3*K11*K7+6*I1*I4**2*I5*K11*K7-2*I1*I3**2*I4*K12*K7+6*I1*I2*I4**2*K12*K7+6*I1**2*I4*I5*K12*K7-I1**2*I3**2*K13*K7+6*I1**2*I2*I4*K13*K7+2*I1**3*I5*K13*K7-2*I2*I3**2*I5*K2*K7+6*I2**2*I4*I5*K2*K7+6*I1*I2*I5**2*K2*K7-I2**2*I3**2*K3*K7+2*I2**3*I4*K3*K7+6*I1*I2**2*I5*K3*K7+2*I2*I3*I4*I5*K4*K7+I1*I3*I5**2*K4*K7+I2**2*I3*I4*K5*K7+2*I1*I2*I3*I5*K5*K7-4*I2*I4**2*I5*K6*K7-4*I1*I4*I5**2*K6*K7-I2**2*I4**2*K7**2-4*I1*I2*I4*I5*K7**2-I1**2*I5**2*K7**2-2*I2*I3**2*I5*K1*K8+6*I2**2*I4*I5*K1*K8+6*I1*I2*I5**2*K1*K8+I1**2*I2*I3*K10*K8-2*I1*I3**2*I4*K11*K8+6*I1*I2*I4**2*K11*K8+6*I1**2*I4*I5*K11*K8-I1**2*I3**2*K12*K8+6*I1**2*I2*I4*K12*K8+2*I1**3*I5*K12*K8+2*I1**3*I2*K13*K8-I2**2*I3**2*K2*K8+2*I2**3*I4*K2*K8+6*I1*I2**2*I5*K2*K8+2*I1*I2**3*K3*K8+I2**2*I3*I4*K4*K8+2*I1*I2*I3*I5*K4*K8+I1*I2**2*I3*K5*K8-2*I2**2*I4**2*K6*K8-8*I1*I2*I4*I5*K6*K8-2*I1**2*I5**2*K6*K8-4*I1*I2**2*I4*K7*K8-4*I1**2*I2*I5*K7*K8-I1**2*I2**2*K8**2-3*I3*I4*I5**2*K1*K9-6*I1*I2*I4**2*K10*K9-6*I1**2*I4*I5*K10*K9+I3*I4**3*K11*K9+3*I1*I3*I4**2*K12*K9+3*I1**2*I3*I4*K13*K9+I3**3*I5*K2*K9-6*I2*I3*I4*I5*K2*K9-3*I1*I3*I5**2*K2*K9+I2*I3**3*K3*K9-3*I2**2*I3*I4*K3*K9-6*I1*I2*I3*I5*K3*K9-I3**2*I4*I5*K4*K9+4*I2*I4**2*I5*K4*K9+4*I1*I4*I5**2*K4*K9-I2*I3**2*I4*K5*K9+2*I2**2*I4**2*K5*K9-I1*I3**2*I5*K5*K9+8*I1*I2*I4*I5*K5*K9+2*I1**2*I5**2*K5*K9+I3*I4**2*I5*K6*K9+I2*I3*I4**2*K7*K9+2*I1*I3*I4*I5*K7*K9+2*I1*I2*I3*I4*K8*K9+I1**2*I3*I5*K8*K9-I2*I4**3*K9**2-3*I1*I4**2*I5*K9**2)
            P6 = (-3*I3*I4*I5**2*K1*K10-3*I1*I2*I4**2*K10**2-3*I1**2*I4*I5*K10**2+I3*I4**3*K10*K11-2*I4**2*I5**2*K1*K12+3*I1*I3*I4**2*K10*K12-2*I4**4*K11*K12-4*I1*I4**3*K12**2+4*I3**2*I4*I5*K1*K13-4*I2*I4**2*I5*K1*K13-4*I1*I4*I5**2*K1*K13+3*I1**2*I3*I4*K10*K13-8*I1*I4**3*K11*K13-12*I1**2*I4**2*K12*K13-4*I1**3*I4*K13**2-2*I5**4*K1*K2+I3**3*I5*K10*K2-6*I2*I3*I4*I5*K10*K2-3*I1*I3*I5**2*K10*K2-2*I4**2*I5**2*K11*K2+4*I3**2*I4*I5*K12*K2-4*I2*I4**2*I5*K12*K2-4*I1*I4*I5**2*K12*K2-I3**4*K13*K2+4*I2*I3**2*I4*K13*K2-2*I2**2*I4**2*K13*K2+4*I1*I3**2*I5*K13*K2-8*I1*I2*I4*I5*K13*K2-2*I1**2*I5**2*K13*K2-4*I2*I5**3*K2**2-8*I2*I5**3*K1*K3+I2*I3**3*K10*K3-3*I2**2*I3*I4*K10*K3-6*I1*I2*I3*I5*K10*K3+4*I3**2*I4*I5*K11*K3-4*I2*I4**2*I5*K11*K3-4*I1*I4*I5**2*K11*K3-I3**4*K12*K3+4*I2*I3**2*I4*K12*K3-2*I2**2*I4**2*K12*K3+4*I1*I3**2*I5*K12*K3-8*I1*I2*I4*I5*K12*K3-2*I1**2*I5**2*K12*K3+4*I1*I2*I3**2*K13*K3-4*I1*I2**2*I4*K13*K3-4*I1**2*I2*I5*K13*K3-12*I2**2*I5**2*K2*K3-4*I2**3*I5*K3**2-I3**2*I4*I5*K10*K4+4*I2*I4**2*I5*K10*K4+4*I1*I4*I5**2*K10*K4-3*I3*I4**2*I5*K12*K4+I3**3*I4*K13*K4-3*I2*I3*I4**2*K13*K4-6*I1*I3*I4*I5*K13*K4+I3*I5**3*K2*K4+3*I2*I3*I5**2*K3*K4-I4*I5**3*K4**2+I3*I5**3*K1*K5-I2*I3**2*I4*K10*K5+2*I2**2*I4**2*K10*K5-I1*I3**2*I5*K10*K5+8*I1*I2*I4*I5*K10*K5+2*I1**2*I5**2*K10*K5-3*I3*I4**2*I5*K11*K5+I3**3*I4*K12*K5-3*I2*I3*I4**2*K12*K5-6*I1*I3*I4*I5*K12*K5+I1*I3**3*K13*K5-6*I1*I2*I3*I4*K13*K5-3*I1**2*I3*I5*K13*K5+3*I2*I3*I5**2*K2*K5+3*I2**2*I3*I5*K3*K5-6*I2*I4*I5**2*K4*K5-2*I1*I5**3*K4*K5-3*I2**2*I4*I5*K5**2-3*I1*I2*I5**2*K5**2+I3*I4**2*I5*K10*K6+2*I4**3*I5*K12*K6-I3**2*I4**2*K13*K6+2*I2*I4**3*K13*K6+6*I1*I4**2*I5*K13*K6+2*I4*I5**3*K2*K6-I3**2*I5**2*K3*K6+6*I2*I4*I5**2*K3*K6+2*I1*I5**3*K3*K6+I3*I4*I5**2*K5*K6+2*I4*I5**3*K1*K7+I2*I3*I4**2*K10*K7+2*I1*I3*I4*I5*K10*K7+2*I4**3*I5*K11*K7-I3**2*I4**2*K12*K7+2*I2*I4**3*K12*K7+6*I1*I4**2*I5*K12*K7-2*I1*I3**2*I4*K13*K7+6*I1*I2*I4**2*K13*K7+6*I1**2*I4*I5*K13*K7-I3**2*I5**2*K2*K7+6*I2*I4*I5**2*K2*K7+2*I1*I5**3*K2*K7-2*I2*I3**2*I5*K3*K7+6*I2**2*I4*I5*K3*K7+6*I1*I2*I5**2*K3*K7+I3*I4*I5**2*K4*K7+2*I2*I3*I4*I5*K5*K7+I1*I3*I5**2*K5*K7-2*I4**2*I5**2*K6*K7-2*I2*I4**2*I5*K7**2-2*I1*I4*I5**2*K7**2-I3**2*I5**2*K1*K8+6*I2*I4*I5**2*K1*K8+2*I1*I5**3*K1*K8+2*I1*I2*I3*I4*K10*K8+I1**2*I3*I5*K10*K8-I3**2*I4**2*K11*K8+2*I2*I4**3*K11*K8+6*I1*I4**2*I5*K11*K8-2*I1*I3**2*I4*K12*K8+6*I1*I2*I4**2*K12*K8+6*I1**2*I4*I5*K12*K8-I1**2*I3**2*K13*K8+6*I1**2*I2*I4*K13*K8+2*I1**3*I5*K13*K8-2*I2*I3**2*I5*K2*K8+6*I2**2*I4*I5*K2*K8+6*I1*I2*I5**2*K2*K8-I2**2*I3**2*K3*K8+2*I2**3*I4*K3*K8+6*I1*I2**2*I5*K3*K8+2*I2*I3*I4*I5*K4*K8+I1*I3*I5**2*K4*K8+I2**2*I3*I4*K5*K8+2*I1*I2*I3*I5*K5*K8-4*I2*I4**2*I5*K6*K8-4*I1*I4*I5**2*K6*K8-2*I2**2*I4**2*K7*K8-8*I1*I2*I4*I5*K7*K8-2*I1**2*I5**2*K7*K8-2*I1*I2**2*I4*K8**2-2*I1**2*I2*I5*K8**2-2*I2*I4**3*K10*K9-6*I1*I4**2*I5*K10*K9+I3*I4**3*K12*K9+3*I1*I3*I4**2*K13*K9-3*I3*I4*I5**2*K2*K9+I3**3*I5*K3*K9-6*I2*I3*I4*I5*K3*K9-3*I1*I3*I5**2*K3*K9+2*I4**2*I5**2*K4*K9-I3**2*I4*I5*K5*K9+4*I2*I4**2*I5*K5*K9+4*I1*I4*I5**2*K5*K9+I3*I4**2*I5*K7*K9+I2*I3*I4**2*K8*K9+2*I1*I3*I4*I5*K8*K9-I4**3*I5*K9**2)
            P4 = (-I2*I4**3*K10**2-3*I1*I4**2*I5*K10**2+I3*I4**3*K10*K12-I4**4*K12**2-2*I4**2*I5**2*K1*K13+3*I1*I3*I4**2*K10*K13-2*I4**4*K11*K13-8*I1*I4**3*K12*K13-6*I1**2*I4**2*K13**2-3*I3*I4*I5**2*K10*K2-2*I4**2*I5**2*K12*K2+4*I3**2*I4*I5*K13*K2-4*I2*I4**2*I5*K13*K2-4*I1*I4*I5**2*K13*K2-I5**4*K2**2-2*I5**4*K1*K3+I3**3*I5*K10*K3-6*I2*I3*I4*I5*K10*K3-3*I1*I3*I5**2*K10*K3-2*I4**2*I5**2*K11*K3+4*I3**2*I4*I5*K12*K3-4*I2*I4**2*I5*K12*K3-4*I1*I4*I5**2*K12*K3-I3**4*K13*K3+4*I2*I3**2*I4*K13*K3-2*I2**2*I4**2*K13*K3+4*I1*I3**2*I5*K13*K3-8*I1*I2*I4*I5*K13*K3-2*I1**2*I5**2*K13*K3-8*I2*I5**3*K2*K3-6*I2**2*I5**2*K3**2+2*I4**2*I5**2*K10*K4-3*I3*I4**2*I5*K13*K4+I3*I5**3*K3*K4-I3**2*I4*I5*K10*K5+4*I2*I4**2*I5*K10*K5+4*I1*I4*I5**2*K10*K5-3*I3*I4**2*I5*K12*K5+I3**3*I4*K13*K5-3*I2*I3*I4**2*K13*K5-6*I1*I3*I4*I5*K13*K5+I3*I5**3*K2*K5+3*I2*I3*I5**2*K3*K5-2*I4*I5**3*K4*K5-3*I2*I4*I5**2*K5**2-I1*I5**3*K5**2+2*I4**3*I5*K13*K6+2*I4*I5**3*K3*K6+I3*I4**2*I5*K10*K7+2*I4**3*I5*K12*K7-I3**2*I4**2*K13*K7+2*I2*I4**3*K13*K7+6*I1*I4**2*I5*K13*K7+2*I4*I5**3*K2*K7-I3**2*I5**2*K3*K7+6*I2*I4*I5**2*K3*K7+2*I1*I5**3*K3*K7+I3*I4*I5**2*K5*K7-I4**2*I5**2*K7**2+2*I4*I5**3*K1*K8+I2*I3*I4**2*K10*K8+2*I1*I3*I4*I5*K10*K8+2*I4**3*I5*K11*K8-I3**2*I4**2*K12*K8+2*I2*I4**3*K12*K8+6*I1*I4**2*I5*K12*K8-2*I1*I3**2*I4*K13*K8+6*I1*I2*I4**2*K13*K8+6*I1**2*I4*I5*K13*K8-I3**2*I5**2*K2*K8+6*I2*I4*I5**2*K2*K8+2*I1*I5**3*K2*K8-2*I2*I3**2*I5*K3*K8+6*I2**2*I4*I5*K3*K8+6*I1*I2*I5**2*K3*K8+I3*I4*I5**2*K4*K8+2*I2*I3*I4*I5*K5*K8+I1*I3*I5**2*K5*K8-2*I4**2*I5**2*K6*K8-4*I2*I4**2*I5*K7*K8-4*I1*I4*I5**2*K7*K8-I2**2*I4**2*K8**2-4*I1*I2*I4*I5*K8**2-I1**2*I5**2*K8**2-2*I4**3*I5*K10*K9+I3*I4**3*K13*K9-3*I3*I4*I5**2*K3*K9+2*I4**2*I5**2*K5*K9+I3*I4**2*I5*K8*K9)
            P2 = (-I4**3*I5*K10**2+I3*I4**3*K10*K13-2*I4**4*K12*K13-4*I1*I4**3*K13**2-2*I4**2*I5**2*K13*K2-3*I3*I4*I5**2*K10*K3-2*I4**2*I5**2*K12*K3+4*I3**2*I4*I5*K13*K3-4*I2*I4**2*I5*K13*K3-4*I1*I4*I5**2*K13*K3-2*I5**4*K2*K3-4*I2*I5**3*K3**2+2*I4**2*I5**2*K10*K5-3*I3*I4**2*I5*K13*K5+I3*I5**3*K3*K5-I4*I5**3*K5**2+2*I4**3*I5*K13*K7+2*I4*I5**3*K3*K7+I3*I4**2*I5*K10*K8+2*I4**3*I5*K12*K8-I3**2*I4**2*K13*K8+2*I2*I4**3*K13*K8+6*I1*I4**2*I5*K13*K8+2*I4*I5**3*K2*K8-I3**2*I5**2*K3*K8+6*I2*I4*I5**2*K3*K8+2*I1*I5**3*K3*K8+I3*I4*I5**2*K5*K8-2*I4**2*I5**2*K7*K8-2*I2*I4**2*I5*K8**2-2*I1*I4*I5**2*K8**2)
            P0 = (-I4**4*K13**2-2*I4**2*I5**2*K13*K3-I5**4*K3**2+2*I4**3*I5*K13*K8+2*I4*I5**3*K3*K8-I4**2*I5**2*K8**2)
            P = [P0, P2, P4, P6, P8, P10, P12, P14, P16]
            G = [G1, G2, G3, G4, G5]
            H = [H1, H2, H3, H4, H5]
            I = [I1, I2, I3, I4, I5]
            return (P, G, H, I)
        (self.P, self.G, self.H, self.I) = calc_parameters(B1X, B1Y, B2X, B2Y, B3X, B3Y, psi1, psi2, psi3, l1, l2, l3, t1, t2, t3)
        P0, P2, P4, P6, P8, P10, P12, P14, P16 = self.P[0], self.P[1], self.P[2], self.P[3], self.P[4], self.P[5], self.P[6], self.P[7], self.P[8]
        G1, G2, G3, G4, G5 = self.G[0], self.G[1], self.G[2], self.G[3], self.G[4]
        H1, H2, H3, H4, H5 = self.H[0], self.H[1], self.H[2], self.H[3], self.H[4]
        I1, I2, I3, I4, I5 = self.I[0], self.I[1], self.I[2], self.I[3], self.I[4]
        # 'Unpacks' parameters needed to find the other two angles.
        p=[P16, P14, P12, P10, P8, P6, P4, P2, P0]
        normp = np.array(p)
        normp /= np.abs(normp).max()
        # Normalises the polynomial coefficients to make the solution process run faster.
        solutions = np.roots(normp)
        sols = [np.sqrt(i) for i in solutions if i > 0]
        xvals = []
        theta1, theta2, theta3 = 0, 0, 0
        for i in range(len(sols)):
            if 0.2679 < np.real(sols[i]) < 0.57735:
                # Selects the roots in the correct range.
                xvals.append(np.real(sols[i]))
        for i in range(len(xvals)):
            phi1 = 2*np.arctan(xvals[i])
            theta1a = ((np.pi/2)-phi1)
            A2 = G1*xvals[i]**2+G2
            B2 = G3*xvals[i]
            C2 = G4*xvals[i]**2+G5
            if (B2**2-4*A2*C2) < 0:
                # If (B2**2-4*A2*C2) < 0 this means that x2 is complex and there are no solutions.
                print 'There are no solutions for this tripod position - DO NOT MOVE TO THIS POSITION'
                quit()
            x2 = (-B2+(B2**2-4*A2*C2)**0.5)/(2*A2)
            phi2 = 2*np.arctan(x2)
            theta2a = ((np.pi/2)-phi2)
            A3 = I1*xvals[i]**2+I4
            B3 = I3*xvals[i]
            C3 = I2*xvals[i]**2+I5
            if (B3**2-4*A3*C3) < 0:
                # If (B3**2-4*A3*C3) < 0 this means that x3 is complex and there are no solutions.
                print 'There are no solutions for this tripod position - DO NOT MOVE TO THIS POSITION'
                quit()
            x3 = (-B3-(B3**2-4*A3*C3)**0.5)/(2*A3)
            phi3 = 2*np.arctan(x3)
            theta3a = ((np.pi/2)-phi3)
            test = (H1*x3**2+H4)*x2**2+H3*x3*x2+(H2*x3**2+H5)
            if abs(test) < 0.1:
                theta1, theta2, theta3 = theta1a, theta2a, theta3a
        if theta1 == 0:
            # If theta1 has not been reset the program has not found any solutions.
            print 'There are no solutions for this tripod position - DO NOT MOVE TO THIS POSITION'
            quit()
        elif theta1 != 0:
            pass
        self.theta[0], self.theta[1], self.theta[2] = theta1, theta2, theta3
        # can remove - for debug
        return (theta1, theta2, theta3)
tripod_class._calcThetafromB=_calcThetafromB
%>
\subsubsection{Implementing the values of $\theta_i$}
\label{subsub:usetheta}
The values of $\theta_i$ can be substituted back into Equation~\ref{eq:v} to find $\mathbf{v}_i$ and the $\mathbf{v}_i$ can then be substituted into Equation~\ref{eq:TB} to find the vectors $\mathbf{T}_i$. Using ${\mathbf T}_i$, it is now possible to calculate $(C_X, C_Y, C_Z)$ and $\alpha_{1,2,3}$.
As $C$ is already known in the $xyz$ frame, finding $C$ in the $XYZ$ frame simply requires a knowledge of ${\mathbf {\hat x}}$,  ${\mathbf {\hat y}}$ and  ${\mathbf {\hat z}}$ since (see Figure 1),
\begin{equation}
C_{XYZ}={\mathbf T}_2 + C_x {\mathbf {\hat x}}  + C_y {\mathbf {\hat y}}  + C_z {\mathbf {\hat z}}  
\label{eq:CXYZ}
\end{equation}
where
\begin{eqnarray}
{\mathbf {\hat y}} & = & \widehat{({\mathbf T}_2-{\mathbf T}_1)} \nonumber \\
{\mathbf {\hat z}} & = & \widehat{
\{
({\mathbf T}_3-{\mathbf T}_1) \times ({\mathbf T}_2-{\mathbf T}_1)
\}
} \nonumber \\
{\mathbf {\hat x}} & = & {\mathbf {\hat y}} \times {\mathbf {\hat z}}
\label{eq:xyz}
\end{eqnarray}

Finally, the rotation angles of the top plate with respect to the bottom plate can be calculated. To do this, it is noted that any unit vector attached to the top plate can be obtained by rotating the same vector in the $XYZ$ base frame by angles $\alpha_{1,2,3}$ about $X$, $Y$ and $Z$:
\begin{equation}
{\mathbf {\hat w}_{xyz}}=R_Z(\alpha_3)  R_Y(\alpha_2)  R_X(\alpha_1) \, {\mathbf {\hat w}_{XYZ}}
\label{eq:w}
\end{equation}
Considering the rotations of ${\mathbf {\hat X}}$, ${\mathbf {\hat Y}}$, ${\mathbf {\hat Z}}$ onto ${\mathbf {\hat x}}$, ${\mathbf {\hat y}}$, ${\mathbf {\hat z}}$, and writing the transformations as a single expression in matrix form, gives (in the $XYZ$ coordinate system):
\begin{eqnarray}
\left( {\mathbf {\hat x}},  {\mathbf {\hat y}}, {\mathbf {\hat z}} \right)
& = & R_Z(\alpha_3)  R_Y(\alpha_2)  R_X(\alpha_1) \,
\left( {\mathbf {\hat X}},  {\mathbf {\hat Y}}, {\mathbf {\hat Z}} \right) \nonumber \\
& = & R_Z(\alpha_3)  R_Y(\alpha_2)  R_X(\alpha_1)
\label{eq:xyzrotation}
\end{eqnarray}
which can be written,
\begin{eqnarray}
\left( 
\begin{array}{ccc}
x_1 & y_1 & z_1 \\
x_2 & y_2 & z_2 \\
x_3 & y_3 & z_3
\end{array} 
\right)
& = &
\left( 
\begin{array}{ccc}
\cos \alpha_3 & -\sin \alpha_3 & 0 \\
\sin \alpha_3 & \cos \alpha_3 & 0 \\
0 & 0 & 1
\end{array} 
\right)
\left( 
\begin{array}{ccc}
\cos \alpha_2 & 0 & \sin \alpha_2\\
0 & 1 & 0 \\
-\sin \alpha_2 & 0 & \cos \alpha_2
\end{array} 
\right)
\nonumber \\
& \times &
\left( 
\begin{array}{ccc}
1 & 0 & 0 \\
0 & \cos \alpha_1 & -\sin \alpha_1 \\
0 & \sin \alpha_1 & \cos \alpha_1
\end{array} 
\right)\label{eq:xyzvec-alpha}
\end{eqnarray}
Since all the components of the matrix on the left hand side ({\it i.e.} ${\mathbf {\hat x}}=(x_1, x_2, x_3)$) have already been calculated, it is straightforward to multiply out the matrices in the right hand side and extract the angles $\alpha_{1,2,3}$

<%
def ctool(self, X, Y):
        '''self.ctool((X1, X2, X3), (Y1, Y2, Y3) calculates tool parameters from
            X list (X values for each leg) and Y list
            outputs coordinates of tooling point and tilt angles (degrees)'''
        self.X, self.Y = X, Y
        # Main calculation of C and alpha tilts from base positions.
        # Base vectors from given translations (X,Y) and fixed centres (BX, BY).
        B1 = np.array((X[0]+self.BX[0], Y[0]+self.BY[0], 0))
        B2 = np.array((X[1]+self.BX[1], Y[1]+self.BY[1], 0))
        B3 = np.array((X[2]+self.BX[2], Y[2]+self.BY[2], 0))
        # Top (T) vectors from bottom (B) vectors and leg vectors (v).
        psi1 = self.psi[0]
        psi2 = self.psi[1]
        psi3 = self.psi[2]
        l1 = self.l[0]
        l2 = self.l[1]
        l3 = self.l[2]
        t1 = self.t[0]
        t2 = self.t[1]
        t3 = self.t[2]
        (theta1, theta2, theta3) = self._calcThetafromB([B1, B2, B3], psi1, psi2, psi3, l1, l2, l3, t1, t2, t3, X, Y)
        v1 = np.array([np.cos(self.psi[0])*np.sin(theta1), np.sin(self.psi[0])*np.sin(theta1), np.cos(theta1)])
        v2 = np.array([np.cos(self.psi[1])*np.sin(theta2), np.sin(self.psi[1])*np.sin(theta2), np.cos(theta2)])
        v3 = np.array([np.cos(self.psi[2])*np.sin(theta3), np.sin(self.psi[2])*np.sin(theta3), np.cos(theta3)])
        T1, T2, T3 = B1+self.l[0]*v1, B2+self.l[1]*v2, B3+self.l[2]*v3
        self.T1, self.T2, self.T3 = T1, T2, T3
        # Calculate tooling point coordinates and angles.
        yvec = (T1-T2)/norm(T1-T2)
        zvec = cross((T3-T1), yvec)/norm(cross((T3-T1), yvec))
        xvec = cross(yvec, zvec)
        C = T2 + self.c[0]*xvec + self.c[1]*yvec + self.c[2]*zvec
        # Calculate alpha angles.
        self.alpha1 = np.arctan(yvec[2]/zvec[2])
        self.alpha2 = np.arcsin(-xvec[2])
        self.alpha3 = np.arctan(xvec[1]/xvec[0])
        return (C, np.array([self.alpha1*180/np.pi, self.alpha2*180/np.pi, self.alpha3*180/np.pi]))

tripod_class.ctool=ctool
%>


\subsection{Calculations 2: Base translations}
\label{subsec:calcs2}
The reverse calculations, {\it i.e.} calculation of the base translations from known tooling point coordinates and angles, are slightly simpler. Eqn.~\eqref{eq:xyzvec-alpha} can be used to calculate the vectors ${\mathbf {\hat x}}$, ${\mathbf {\hat y}}$, ${\mathbf {\hat z}}$ from the three angles $\alpha_i$ where  ${\mathbf {\hat x}}=(x_1, x_2, x_3)$ {\it etc}. With these unit vectors, it is possible to calculate 
${\mathbf T}_i$. Eqn.~\eqref{eq:CXYZ} provides ${\mathbf T}_2$. Next,
\begin{equation}
{\mathbf T}_1={\mathbf T}_2+t_3 \, {\mathbf {\hat y}}
\label{eq:T1}
\end{equation}
and the remaining vector can be calculated via the cosine-rule:
\begin{eqnarray}
\cos \chi_2 &= &(t_1^{\,2}+t_3^{\,2}-t_2^{\,2})/(2 t_1t_3) \nonumber \\
\sin\chi_2&=&\sqrt{1-\cos\chi_2^{\,2}}\nonumber \\
{\mathbf T}_3&=&{\mathbf T}_2 +{\mathbf {\hat x}} \, t_1 \sin\chi_2 +{\mathbf {\hat y}} \, t_1 \cos\chi_2
\label{eq:T3}
\end{eqnarray}
with $\chi_2$ being the angle between $t_1$ and $t_3$.
The tilt angles, $\theta_i$, of the legs can be calculated using
\begin{equation}
\cos \theta_i = {\mathbf T}_i \cdot {\mathbf {\hat Z}} /l_i
\label{eq:costhetai}
\end{equation}
Here, $\theta_i$ can be chosen to be either positive or negative, depending on which solution is required. Finally, Eqn.~\eqref{eq:v} gives the vectors
${\mathbf v}_i$ which can be inserted in to Eqn.~\eqref{eq:TB} to give the base vectors ${\mathbf B}_i$.
<%
def _calcBXY(self, C, (alpha1, alpha2, alpha3)):
        # Calculate base translations (see documentation).
        (xvec, yvec, zvec) = self._calc_xyzvec(alpha1, alpha2, alpha3)
        # Calculate T1,2,3 from xvec, yvec, zvec.
        T2 = C-(self.c[0]*xvec+self.c[1]*yvec+self.c[2]*zvec)
        T1 = T2+self.t[2]*yvec
        cos_t2 = (self.t[0]**2+self.t[2]**2-self.t[1]**2)/(2*self.t[0]*self.t[2])  # Cosine rule.
        sin_t2 = np.sqrt(1-cos_t2**2)
        T3 = T2 + xvec*self.t[0]*sin_t2 + yvec*self.t[0]*cos_t2
        # Calc B from T.
        cos_theta1 = T1[2]/self.l[0]  # T1[2]==T1.z etc
        cos_theta2 = T2[2]/self.l[1]
        cos_theta3 = T3[2]/self.l[2]
        theta1 = np.arccos(cos_theta1)
        theta2 = np.arccos(cos_theta2)
        theta3 = -np.arccos(cos_theta3)
        self.theta[0], self.theta[1], self.theta[2] = theta1, theta2, theta3
        sin_theta1 = np.sqrt(1-cos_theta1**2)*np.sign(self.theta[0])
        sin_theta2 = np.sqrt(1-cos_theta2**2)*np.sign(self.theta[1])
        sin_theta3 = np.sqrt(1-cos_theta3**2)*np.sign(self.theta[2])
        v1 = np.array([np.cos(self.psi[0])*sin_theta1, np.sin(self.psi[0])*sin_theta1, cos_theta1])
        v2 = np.array([np.cos(self.psi[1])*sin_theta2, np.sin(self.psi[1])*sin_theta2, cos_theta2])
        v3 = np.array([np.cos(self.psi[2])*sin_theta3, np.sin(self.psi[2])*sin_theta3, cos_theta3])
        B1, B2, B3 = T1-v1*self.l[0], T2-v2*self.l[1], T3-v3*self.l[2]
        X = [B1[0]-self.BX[0], B2[0]-self.BX[1], B3[0]-self.BX[2]]
        Y = [B1[1]-self.BY[0], B2[1]-self.BY[1], B3[1]-self.BY[2]]
        # X[leg1,2,3], B1,2,3[X,Y,Z], BX[leg1,2,3]
        return X, Y
tripod_class._calcBXY=_calcBXY
def _calc_xyzvec(self, alpha1, alpha2, alpha3):
        # Calculate top plate coordinate vectors (see documentation).
        xvec = np.array([np.cos(alpha2)*np.cos(alpha3), np.cos(alpha2)*np.sin(alpha3), -np.sin(alpha2)])
        yvec = np.array([np.sin(alpha1)*np.sin(alpha2)*np.cos(alpha3)-np.cos(alpha1)*np.sin(alpha3), np.sin(alpha1)*np.sin(alpha2)*np.sin(alpha3)+np.cos(alpha1)*np.cos(alpha3), np.sin(alpha1)*np.cos(alpha2)])
        zvec = np.array([np.cos(alpha1)*np.sin(alpha2)*np.cos(alpha3)+np.sin(alpha1)*np.sin(alpha3), np.cos(alpha1)*np.sin(alpha2)*np.sin(alpha3)-np.sin(alpha1)*np.cos(alpha3), np.cos(alpha1)*np.cos(alpha2)])
        return (xvec, yvec, zvec)
tripod_class._calc_xyzvec=_calc_xyzvec
def cbase(self, C, (alpha1, alpha2, alpha3)):
        '''self.cbase((CX, CY, CZ),(alpha1,alpha2, alpha3)) calculates base vectors
        for tooling point coordinates and angles (degrees)'''
        X, Y = self._calcBXY(C, (alpha1*pi/180, alpha2*pi/180, alpha3*pi/180))
        self.X, self.Y = X, Y
        return np.array(X), np.array(Y)
tripod_class.cbase=cbase
%>

\section{Testing the tripod}
\label{sec:testing}
The values of the parameters used in the I16 implementation of the tripod are given in Table~\ref{tab:parameters}.
\begin{table}
\begin{center}
\begin{tabular}{| l | l | l | l |}
\hline
\textbf{Variable} & \textbf{Value/mm} & \textbf{Variable} & \textbf{Value/mm unless otherwise stated}\\ \hline
$l_1$ & $134.2$ & $\theta_1$ & $\pi/4$ rad \\ \hline
$l_2$ & $134.2$ & $\theta_2$ & $\pi/4$ rad\\ \hline
$l_3$ & $134.2$ & $\theta_3$ & $-\pi/4$ rad\\ \hline
$t_1$ & $219.129$ & $\psi_1$ & $-\pi/3$ rad\\ \hline
$t_2$ & $219.129$ & $\psi_2$ & $\pi/3$ rad\\ \hline
$t_3$ & $84.963$ & $\psi_3$ & $0.0$ rad\\ \hline
$C_x$ & $150.102$ & $\textbf{B}_1^C$ & $[0.0, 249.324, 0.0]$ \\ \hline
$C_y$ & $42.4817$ & $\textbf{B}_2^C$ & $[0.0, 0.0, 0.0]$\\ \hline
$C_z$ & $35.7574$ & $\textbf{B}_3^C$ & $[357.313, 124.662, 0.0]$\\ \hline
$B_1^X$ & $0.0$ & $B_1^Y$ & $0.0$\\ \hline
$B_2^X$ & $0.0$ & $B_2^Y$ & $0.0$\\ \hline
$B_3^X$ & $0.0$ & $B_3^Y$ & $0.0$\\ \hline
$C_X$ & $197.54901$ & $\alpha_1$ & $0.0$\\ \hline
$C_Y$ & $124.66220$ & $\alpha_2$ & $0.0$\\ \hline
$C_Z$ & $130.65066$ & $\alpha_3$ & $0.0$\\ \hline
       \end{tabular}
\end{center}
\caption{\label{tab:parameters} A table to show the exact values of the parameters used in the code to control the Diamond implementation of the tripod.}
\end{table}
The class tripod$\_$class.py was implemented and tested, to see if certain movements (namely translation in the Z direction and rotation about the Y and Z axes) produced the expected changes in $\textbf{C}$ and $\alpha_i$. These movements were selected because they are the most important and mechanically complex movements needed to position the tripod for use on the beamline.
<%
tp = tripod_class()

tp.ctool([0, 0, 0], [0, 0, 0])
# calculate C[3] and Alpha[3] for given X[3], Y[3] base translations
print tp
%>


<%
print '\n\n-\n\n\n\n\n\nTest cases: calculate angles and tool point coordinates for particular slide translations, then carry out the reverse calculation to check that the translations are the original values'
print '\n\n-\n\n\n\nFirst a 1mm translation of one slide\n\n'
X, Y = [0, 0, 1.0], [0, 0, 0]
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
# calculate tool-point coordinates c and tilt angles alpha for given X and Y
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
%>


<%
print '\n\n-\n\n\n\n\n\nNow we move the tripod stage upwards (in the Z direction) by 5mm and return it to its original position as a further check\n\n\n\n'

X, Y = [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]
C, alpha = tp.ctool(X, Y)
# calculate tool-point coordinates C and tilt angles alpha for given X Y base translations
C[2] += 5.0
# set this to be C[0] to move in the X-direction, C[1] to move in the Y-direction and C[2] to move in the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)

C[2] -= 5.0
# set this to be C[0] to move in the X-direction, C[1] to move in the Y-direction and C[2] to move in the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\n-\n\n\n\n\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
%>


<%
print '\n\n-\n\n\n\n\n\nNext we perform a rotation about the Y axis and then rotate the tripod back\n\n\n\n'

X, Y = [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]
C, alpha = tp.ctool(X, Y)
# calculate tool-point coordinates C and tilt angles alpha for given X Y base translations
alpha[1] += 0.5
# set this to be alpha[0] to rotate about the X-direction, alpha[1] to rotate about the Y-direction and alpha[2] to rotate about the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)

alpha[1] -= 0.5
# set this to be alpha[0] to rotate about the X-direction, alpha[1] to rotate about the Y-direction and alpha[2] to rotate about the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\n-\n\n\n\n\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
%>


<%
print '\n\n-\n\n\n\n\nAnd finally a rotation about the Z axis\n\n'

X, Y = [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]
C, alpha = tp.ctool(X, Y)
# calculate tool-point coordinates C and tilt angles alpha for given X Y base translations
alpha[2] += 0.5
# set this to be alpha[0] to rotate about the X-direction, alpha[1] to rotate about the Y-direction and alpha[2] to rotate about the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)

alpha[2] -= 0.5
# set this to be alpha[0] to rotate about the X-direction, alpha[1] to rotate about the Y-direction and alpha[2] to rotate about the Z-direction
X, Y = tp.cbase(C, np.array(alpha))
print '\n\n-\n\n\n\n\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
C, alpha = tp.ctool(X, Y)
print '\n\nTool point coords (C):  %.5f %.5f %.5f' % tuple(C)
print '\n\nTilt angles (alpha, deg) :%.5f %.5f %.5f' % tuple(alpha)
print '\n\nReverse calculation to check that X and Y are reproduced'
X, Y = tp.cbase(C, np.array(alpha))
print '\n\nX coords of base translations applied: %.5f %.5f %.5f' % tuple(X)
print '\n\nY coords of base translations applied: %.5f %.5f %.5f' % tuple(Y)
%>

\begin{thebibliography}{56}
\bibitem{Stewart65}
D. Stewart, 1965. A Platform with Six Degrees of Freedom, \emph{Proceedings of the Institute of Mechanical Engineers}, Vol 180 Part 1 No 15: 371-386
\bibitem{Varanyuwatana14}
V. Varanyuwatana, 2014. Kinematics and Construction of a 6-3 Configuration Stewart Platform. Masters Thesis, University of Reading, 80p.
\bibitem{Nanua90}
P. Nanua, K. J. Waldron and V. Murthy, 1990. Direct Kinematic Solution of a Stewart Platform, \emph{IEEE Transactions on Robotics and Automation}, Vol 6, No. 4: 438-444.
\bibitem{BenHorin99}
R Ben-Horin, M Shosham, and S Djerassi, 1999. Kinematics, Dynamics and Construction of a Planarly Actuated Parallel robot, Israel Institue of Technology.
\bibitem{Salmon64}
G. Salmon, Lessons Introductory to the Modern Higher Algebra (5th ed.). New York, Chelsea, 1964, p76-77; p82-83.
\end{thebibliography}

\appendix
\appendixpage

\section{Polynomial in $x_1$}
\label{app:polyx1}
The degree-16 polynomial obtained by expanding out equation (23) is as follows: \\
$
(-I_2^4K_1^2-2I_1^2I_2^2K_1K_{11}-I_1^4K_{11}^2+2I_1I_2^3K_1K_6+2I_1^3I_2K_{11}K_6-I_1^2I_2^2K_6^2)x^{16} + \\
(-4I_2^3I_5K_1^2+4I_1I_2I_3^2K_1K_{11}-4I_1I_2^2I_4K_1K_{11}-4I_1^2I_2I_5K_1K_{11}-4I_1^3I_4K_{11}^2-2I_1^2I_2^2K_1K_{12}-2I_1^4K_{11}K_{12}-2I_2^4K_1K_2-2I_1^2I_2^2K_{11}K_2+I_2^3I_3K_1K_4-3I_1^2I_2I_3K_{11}K_4-I_1I_2^3K_4^2-I_2^2I_3^2K_1K_6+2I_2^3I_4K_1K_6+6I_1I_2^2I_5K_1K_6-I_1^2I_3^2K_{11}K_6+6I_1^2I_2I_4K_{11}K_6+2I_1^3I_5K_{11}K_6+2I_1^3I_2K_{12}K_6+2I_1I_2^3K_2K_6+I_1I_2^2I_3K_4K_6-2I_1I_2^2I_4K_6^2-2I_1^2I_2I_5K_6^2+2I_1I_2^3K_1K_7+2I_1^3I_2K_{11}K_7-2I_1^2I_2^2K_6K_7-3I_1I_2^2I_3K_1K_9+I_1^3I_3K_{11}K_9+2I_1^2I_2^2K_4K_9+I_1^2I_2I_3K_6K_9-I_1^3I_2K_9^2)x^{14} + \\
(-6I_2^2I_5^2K_1^2-3I_1I_2^2I_3K_1K_{10}-I_3^4K_1K_{11}+4I_2I_3^2I_4K_1K_{11}-2I_2^2I_4^2K_1K_{11}+4I_1I_3^2I_5K_1K_{11}-8I_1I_2I_4I_5K_1K_{11}-2I_1^2I_5^2K_1K_{11}+I_1^3I_3K_{10}K_{11}-6I_1^2I_4^2K_{11}^2+4I_1I_2I_3^2K_1K_{12}-4I_1I_2^2I_4K_1K_{12}-4I_1^2I_2I_5K_1K_{12}-8I_1^3I_4K_{11}K_{12}-I_1^4K_{12}^2-2I_1^2I_2^2K_1K_{13}-2I_1^4K_{11}K_{13}-8I_2^3I_5K_1K_2+4I_1I_2I_3^2K_{11}K_2-4I_1I_2^2I_4K_{11}K_2-4I_1^2I_2I_5K_{11}K_2-2I_1^2I_2^2K_{12}K_2-I_2^4K_2^2-2I_2^4K_1K_3-2I_1^2I_2^2K_{11}K_3+3I_2^2I_3I_5K_1K_4+2I_1^2I_2^2K_{10}K_4+I_1I_3^3K_{11}K_4-6I_1I_2I_3I_4K_{11}K_4-3I_1^2I_3I_5K_{11}K_4-3I_1^2I_2I_3K_{12}K_4+I_2^3I_3K_2K_4-I_2^3I_4K_4^2-3I_1I_2^2I_5K_4^2+I_2^3I_3K_1K_5-3I_1^2I_2I_3K_{11}K_5-2I_1I_2^3K_4K_5-2I_2I_3^2I_5K_1K_6+6I_2^2I_4I_5K_1K_6+6I_1I_2I_5^2K_1K_6+I_1^2I_2I_3K_{10}K_6-2I_1I_3^2I_4K_{11}K_6+6I_1I_2I_4^2K_{11}K_6+6I_1^2I_4I_5K_{11}K_6-I_1^2I_3^2K_{12}K_6+6I_1^2I_2I_4K_{12}K_6+2I_1^3I_5K_{12}K_6+2I_1^3I_2K_{13}K_6-I_2^2I_3^2K_2K_6+2I_2^3I_4K_2K_6+6I_1I_2^2I_5K_2K_6+2I_1I_2^3K_3K_6+I_2^2I_3I_4K_4K_6+2I_1I_2I_3I_5K_4K_6+I_1I_2^2I_3K_5K_6-I_2^2I_4^2K_6^2-4I_1I_2I_4I_5K_6^2-I_1^2I_5^2K_6^2-I_2^2I_3^2K_1K_7+2I_2^3I_4K_1K_7+6I_1I_2^2I_5K_1K_7-I_1^2I_3^2K_{11}K_7+6I_1^2I_2I_4K_{11}K_7+2I_1^3I_5K_{11}K_7+2I_1^3I_2K_{12}K_7+2I_1I_2^3K_2K_7+I_1I_2^2I_3K_4K_7-4I_1I_2^2I_4K_6K_7-4I_1^2I_2I_5K_6K_7-I_1^2I_2^2K_7^2+2I_1I_2^3K_1K_8+2I_1^3I_2K_{11}K_8-2I_1^2I_2^2K_6K_8+I_2I_3^3K_1K_9-3I_2^2I_3I_4K_1K_9-6I_1I_2I_3I_5K_1K_9-2I_1^3I_2K_{10}K_9+3I_1^2I_3I_4K_{11}K_9+I_1^3I_3K_{12}K_9-3I_1I_2^2I_3K_2K_9-I_1I_2I_3^2K_4K_9+4I_1I_2^2I_4K_4K_9+4I_1^2I_2I_5K_4K_9+2I_1^2I_2^2K_5K_9+2I_1I_2I_3I_4K_6K_9+I_1^2I_3I_5K_6K_9+I_1^2I_2I_3K_7K_9-3I_1^2I_2I_4K_9^2-I_1^3I_5K_9^2)x^{12} + \\
(-4I_2I_5^3K_1^2+I_2I_3^3K_1K_{10}-3I_2^2I_3I_4K_1K_{10}-6I_1I_2I_3I_5K_1K_{10}-I_1^3I_2K_{10}^2+4I_3^2I_4I_5K_1K_{11}-4I_2I_4^2I_5K_1K_{11}-4I_1I_4I_5^2K_1K_{11}+3I_1^2I_3I_4K_{10}K_{11}-4I_1I_4^3K_{11}^2-I_3^4K_1K_{12}+4I_2I_3^2I_4K_1K_{12}-2I_2^2I_4^2K_1K_{12}+4I_1I_3^2I_5K_1K_{12}-8I_1I_2I_4I_5K_1K_{12}-2I_1^2I_5^2K_1K_{12}+I_1^3I_3K_{10}K_{12}-{12}I_1^2I_4^2K_{11}K_{12}-4I_1^3I_4K_{12}^2+4I_1I_2I_3^2K_1K_{13}-4I_1I_2^2I_4K_1K_{13}-4I_1^2I_2I_5K_1K_{13}-8I_1^3I_4K_{11}K_{13}-2I_1^4K_{12}K_{13}-{12}I_2^2I_5^2K_1K_2-3I_1I_2^2I_3K_{10}K_2-I_3^4K_{11}K_2+4I_2I_3^2I_4K_{11}K_2-2I_2^2I_4^2K_{11}K_2+4I_1I_3^2I_5K_{11}K_2-8I_1I_2I_4I_5K_{11}K_2-2I_1^2I_5^2K_{11}K_2+4I_1I_2I_3^2K_{12}K_2-4I_1I_2^2I_4K_{12}K_2-4I_1^2I_2I_5K_{12}K_2-2I_1^2I_2^2K_{13}K_2-4I_2^3I_5K_2^2-8I_2^3I_5K_1K_3+4I_1I_2I_3^2K_{11}K_3-4I_1I_2^2I_4K_{11}K_3-4I_1^2I_2I_5K_{11}K_3-2I_1^2I_2^2K_{12}K_3-2I_2^4K_2K_3+3I_2I_3I_5^2K_1K_4-I_1I_2I_3^2K_{10}K_4+4I_1I_2^2I_4K_{10}K_4+4I_1^2I_2I_5K_{10}K_4+I_3^3I_4K_{11}K_4-3I_2I_3I_4^2K_{11}K_4-6I_1I_3I_4I_5K_{11}K_4+I_1I_3^3K_{12}K_4-6I_1I_2I_3I_4K_{12}K_4-3I_1^2I_3I_5K_{12}K_4-3I_1^2I_2I_3K_{13}K_4+3I_2^2I_3I_5K_2K_4+I_2^3I_3K_3K_4-3I_2^2I_4I_5K_4^2-3I_1I_2I_5^2K_4^2+3I_2^2I_3I_5K_1K_5+2I_1^2I_2^2K_{10}K_5+I_1I_3^3K_{11}K_5-6I_1I_2I_3I_4K_{11}K_5-3I_1^2I_3I_5K_{11}K_5-3I_1^2I_2I_3K_{12}K_5+I_2^3I_3K_2K_5-2I_2^3I_4K_4K_5-6I_1I_2^2I_5K_4K_5-I_1I_2^3K_5^2-I_3^2I_5^2K_1K_6+6I_2I_4I_5^2K_1K_6+2I_1I_5^3K_1K_6+2I_1I_2I_3I_4K_{10}K_6+I_1^2I_3I_5K_{10}K_6-I_3^2I_4^2K_{11}K_6+2I_2I_4^3K_{11}K_6+6I_1I_4^2I_5K_{11}K_6-2I_1I_3^2I_4K_{12}K_6+6I_1I_2I_4^2K_{12}K_6+6I_1^2I_4I_5K_{12}K_6-I_1^2I_3^2K_{13}K_6+6I_1^2I_2I_4K_{13}K_6+2I_1^3I_5K_{13}K_6-2I_2I_3^2I_5K_2K_6+6I_2^2I_4I_5K_2K_6+6I_1I_2I_5^2K_2K_6-I_2^2I_3^2K_3K_6+2I_2^3I_4K_3K_6+6I_1I_2^2I_5K_3K_6+2I_2I_3I_4I_5K_4K_6+I_1I_3I_5^2K_4K_6+I_2^2I_3I_4K_5K_6+2I_1I_2I_3I_5K_5K_6-2I_2I_4^2I_5K_6^2-2I_1I_4I_5^2K_6^2-2I_2I_3^2I_5K_1K_7+6I_2^2I_4I_5K_1K_7+6I_1I_2I_5^2K_1K_7+I_1^2I_2I_3K_{10}K_7-2I_1I_3^2I_4K_{11}K_7+6I_1I_2I_4^2K_{11}K_7+6I_1^2I_4I_5K_{11}K_7-I_1^2I_3^2K_{12}K_7+6I_1^2I_2I_4K_{12}K_7+2I_1^3I_5K_{12}K_7+2I_1^3I_2K_{13}K_7-I_2^2I_3^2K_2K_7+2I_2^3I_4K_2K_7+6I_1I_2^2I_5K_2K_7+2I_1I_2^3K_3K_7+I_2^2I_3I_4K_4K_7+2I_1I_2I_3I_5K_4K_7+I_1I_2^2I_3K_5K_7-2I_2^2I_4^2K_6K_7-8I_1I_2I_4I_5K_6K_7-2I_1^2I_5^2K_6K_7-2I_1I_2^2I_4K_7^2-2I_1^2I_2I_5K_7^2-I_2^2I_3^2K_1K_8+2I_2^3I_4K_1K_8+6I_1I_2^2I_5K_1K_8-I_1^2I_3^2K_{11}K_8+6I_1^2I_2I_4K_{11}K_8+2I_1^3I_5K_{11}K_8+2I_1^3I_2K_{12}K_8+2I_1I_2^3K_2K_8+I_1I_2^2I_3K_4K_8-4I_1I_2^2I_4K_6K_8-4I_1^2I_2I_5K_6K_8-2I_1^2I_2^2K_7K_8+I_3^3I_5K_1K_9-6I_2I_3I_4I_5K_1K_9-3I_1I_3I_5^2K_1K_9-6I_1^2I_2I_4K_{10}K_9-2I_1^3I_5K_{10}K_9+3I_1I_3I_4^2K_{11}K_9+3I_1^2I_3I_4K_{12}K_9+I_1^3I_3K_{13}K_9+I_2I_3^3K_2K_9-3I_2^2I_3I_4K_2K_9-6I_1I_2I_3I_5K_2K_9-3I_1I_2^2I_3K_3K_9-I_2I_3^2I_4K_4K_9+2I_2^2I_4^2K_4K_9-I_1I_3^2I_5K_4K_9+8I_1I_2I_4I_5K_4K_9+2I_1^2I_5^2K_4K_9-I_1I_2I_3^2K_5K_9+4I_1I_2^2I_4K_5K_9+4I_1^2I_2I_5K_5K_9+I_2I_3I_4^2K_6K_9+2I_1I_3I_4I_5K_6K_9+2I_1I_2I_3I_4K_7K_9+I_1^2I_3I_5K_7K_9+I_1^2I_2I_3K_8K_9-3I_1I_2I_4^2K_9^2-3I_1^2I_4I_5K_9^2)x^{10} + \\
(-I_5^4K_1^2+I_3^3I_5K_1K_{10}-6I_2I_3I_4I_5K_1K_{10}-3I_1I_3I_5^2K_1K_{10}-3I_1^2I_2I_4K_{10}^2-I_1^3I_5K_{10}^2-2I_4^2I_5^2K_1K_{11}+3I_1I_3I_4^2K_{10}K_{11}-I_4^4K_{11}^2+4I_3^2I_4I_5K_1K_{12}-4I_2I_4^2I_5K_1K_{12}-4I_1I_4I_5^2K_1K_{12}+3I_1^2I_3I_4K_{10}K_{12}-8I_1I_4^3K_{11}K_{12}-6I_1^2I_4^2K_{12}^2-I_3^4K_1K_{13}+4I_2I_3^2I_4K_1K_{13}-2I_2^2I_4^2K_1K_{13}+4I_1I_3^2I_5K_1K_{13}-8I_1I_2I_4I_5K_1K_{13}-2I_1^2I_5^2K_1K_{13}+I_1^3I_3K_{10}K_{13}-{12}I_1^2I_4^2K_{11}K_{13}-8I_1^3I_4K_{12}K_{13}-I_1^4K_{13}^2-8I_2I_5^3K_1K_2+I_2I_3^3K_{10}K_2-3I_2^2I_3I_4K_{10}K_2-6I_1I_2I_3I_5K_{10}K_2+4I_3^2I_4I_5K_{11}K_2-4I_2I_4^2I_5K_{11}K_2-4I_1I_4I_5^2K_{11}K_2-I_3^4K_{12}K_2+4I_2I_3^2I_4K_{12}K_2-2I_2^2I_4^2K_{12}K_2+4I_1I_3^2I_5K_{12}K_2-8I_1I_2I_4I_5K_{12}K_2-2I_1^2I_5^2K_{12}K_2+4I_1I_2I_3^2K_{13}K_2-4I_1I_2^2I_4K_{13}K_2-4I_1^2I_2I_5K_{13}K_2-6I_2^2I_5^2K_2^2-{12}I_2^2I_5^2K_1K_3-3I_1I_2^2I_3K_{10}K_3-I_3^4K_{11}K_3+4I_2I_3^2I_4K_{11}K_3-2I_2^2I_4^2K_{11}K_3+4I_1I_3^2I_5K_{11}K_3-8I_1I_2I_4I_5K_{11}K_3-2I_1^2I_5^2K_{11}K_3+4I_1I_2I_3^2K_{12}K_3-4I_1I_2^2I_4K_{12}K_3-4I_1^2I_2I_5K_{12}K_3-2I_1^2I_2^2K_{13}K_3-8I_2^3I_5K_2K_3-I_2^4K_3^2+I_3I_5^3K_1K_4-I_2I_3^2I_4K_{10}K_4+2I_2^2I_4^2K_{10}K_4-I_1I_3^2I_5K_{10}K_4+8I_1I_2I_4I_5K_{10}K_4+2I_1^2I_5^2K_{10}K_4-3I_3I_4^2I_5K_{11}K_4+I_3^3I_4K_{12}K_4-3I_2I_3I_4^2K_{12}K_4-6I_1I_3I_4I_5K_{12}K_4+I_1I_3^3K_{13}K_4-6I_1I_2I_3I_4K_{13}K_4-3I_1^2I_3I_5K_{13}K_4+3I_2I_3I_5^2K_2K_4+3I_2^2I_3I_5K_3K_4-3I_2I_4I_5^2K_4^2-I_1I_5^3K_4^2+3I_2I_3I_5^2K_1K_5-I_1I_2I_3^2K_{10}K_5+4I_1I_2^2I_4K_{10}K_5+4I_1^2I_2I_5K_{10}K_5+I_3^3I_4K_{11}K_5-3I_2I_3I_4^2K_{11}K_5-6I_1I_3I_4I_5K_{11}K_5+I_1I_3^3K_{12}K_5-6I_1I_2I_3I_4K_{12}K_5-3I_1^2I_3I_5K_{12}K_5-3I_1^2I_2I_3K_{13}K_5+3I_2^2I_3I_5K_2K_5+I_2^3I_3K_3K_5-6I_2^2I_4I_5K_4K_5-6I_1I_2I_5^2K_4K_5-I_2^3I_4K_5^2-3I_1I_2^2I_5K_5^2+2I_4I_5^3K_1K_6+I_2I_3I_4^2K_{10}K_6+2I_1I_3I_4I_5K_{10}K_6+2I_4^3I_5K_{11}K_6-I_3^2I_4^2K_{12}K_6+2I_2I_4^3K_{12}K_6+6I_1I_4^2I_5K_{12}K_6-2I_1I_3^2I_4K_{13}K_6+6I_1I_2I_4^2K_{13}K_6+6I_1^2I_4I_5K_{13}K_6-I_3^2I_5^2K_2K_6+6I_2I_4I_5^2K_2K_6+2I_1I_5^3K_2K_6-2I_2I_3^2I_5K_3K_6+6I_2^2I_4I_5K_3K_6+6I_1I_2I_5^2K_3K_6+I_3I_4I_5^2K_4K_6+2I_2I_3I_4I_5K_5K_6+I_1I_3I_5^2K_5K_6-I_4^2I_5^2K_6^2-I_3^2I_5^2K_1K_7+6I_2I_4I_5^2K_1K_7+2I_1I_5^3K_1K_7+2I_1I_2I_3I_4K_{10}K_7+I_1^2I_3I_5K_{10}K_7-I_3^2I_4^2K_{11}K_7+2I_2I_4^3K_{11}K_7+6I_1I_4^2I_5K_{11}K_7-2I_1I_3^2I_4K_{12}K_7+6I_1I_2I_4^2K_{12}K_7+6I_1^2I_4I_5K_{12}K_7-I_1^2I_3^2K_{13}K_7+6I_1^2I_2I_4K_{13}K_7+2I_1^3I_5K_{13}K_7-2I_2I_3^2I_5K_2K_7+6I_2^2I_4I_5K_2K_7+6I_1I_2I_5^2K_2K_7-I_2^2I_3^2K_3K_7+2I_2^3I_4K_3K_7+6I_1I_2^2I_5K_3K_7+2I_2I_3I_4I_5K_4K_7+I_1I_3I_5^2K_4K_7+I_2^2I_3I_4K_5K_7+2I_1I_2I_3I_5K_5K_7-4I_2I_4^2I_5K_6K_7-4I_1I_4I_5^2K_6K_7-I_2^2I_4^2K_7^2-4I_1I_2I_4I_5K_7^2-I_1^2I_5^2K_7^2-2I_2I_3^2I_5K_1K_8+6I_2^2I_4I_5K_1K_8+6I_1I_2I_5^2K_1K_8+I_1^2I_2I_3K_{10}K_8-2I_1I_3^2I_4K_{11}K_8+6I_1I_2I_4^2K_{11}K_8+6I_1^2I_4I_5K_{11}K_8-I_1^2I_3^2K_{12}K_8+6I_1^2I_2I_4K_{12}K_8+2I_1^3I_5K_{12}K_8+2I_1^3I_2K_{13}K_8-I_2^2I_3^2K_2K_8+2I_2^3I_4K_2K_8+6I_1I_2^2I_5K_2K_8+2I_1I_2^3K_3K_8+I_2^2I_3I_4K_4K_8+2I_1I_2I_3I_5K_4K_8+I_1I_2^2I_3K_5K_8-2I_2^2I_4^2K_6K_8-8I_1I_2I_4I_5K_6K_8-2I_1^2I_5^2K_6K_8-4I_1I_2^2I_4K_7K_8-4I_1^2I_2I_5K_7K_8-I_1^2I_2^2K_8^2-3I_3I_4I_5^2K_1K_9-6I_1I_2I_4^2K_{10}K_9-6I_1^2I_4I_5K_{10}K_9+I_3I_4^3K_{11}K_9+3I_1I_3I_4^2K_{12}K_9+3I_1^2I_3I_4K_{13}K_9+I_3^3I_5K_2K_9-6I_2I_3I_4I_5K_2K_9-3I_1I_3I_5^2K_2K_9+I_2I_3^3K_3K_9-3I_2^2I_3I_4K_3K_9-6I_1I_2I_3I_5K_3K_9-I_3^2I_4I_5K_4K_9+4I_2I_4^2I_5K_4K_9+4I_1I_4I_5^2K_4K_9-I_2I_3^2I_4K_5K_9+2I_2^2I_4^2K_5K_9-I_1I_3^2I_5K_5K_9+8I_1I_2I_4I_5K_5K_9+2I_1^2I_5^2K_5K_9+I_3I_4^2I_5K_6K_9+I_2I_3I_4^2K_7K_9+2I_1I_3I_4I_5K_7K_9+2I_1I_2I_3I_4K_8K_9+I_1^2I_3I_5K_8K_9-I_2I_4^3K_9^2-3I_1I_4^2I_5K_9^2)x^8 + \\
(-3I_3I_4I_5^2K_1K_{10}-3I_1I_2I_4^2K_{10}^2-3I_1^2I_4I_5K_{10}^2+I_3I_4^3K_{10}K_{11}-2I_4^2I_5^2K_1K_{12}+3I_1I_3I_4^2K_{10}K_{12}-2I_4^4K_{11}K_{12}-4I_1I_4^3K_{12}^2+4I_3^2I_4I_5K_1K_{13}-4I_2I_4^2I_5K_1K_{13}-4I_1I_4I_5^2K_1K_{13}+3I_1^2I_3I_4K_{10}K_{13}-8I_1I_4^3K_{11}K_{13}-{12}I_1^2I_4^2K_{12}K_{13}-4I_1^3I_4K_{13}^2-2I_5^4K_1K_2+I_3^3I_5K_{10}K_2-6I_2I_3I_4I_5K_{10}K_2-3I_1I_3I_5^2K_{10}K_2-2I_4^2I_5^2K_{11}K_2+4I_3^2I_4I_5K_{12}K_2-4I_2I_4^2I_5K_{12}K_2-4I_1I_4I_5^2K_{12}K_2-I_3^4K_{13}K_2+4I_2I_3^2I_4K_{13}K_2-2I_2^2I_4^2K_{13}K_2+4I_1I_3^2I_5K_{13}K_2-8I_1I_2I_4I_5K_{13}K_2-2I_1^2I_5^2K_{13}K_2-4I_2I_5^3K_2^2-8I_2I_5^3K_1K_3+I_2I_3^3K_{10}K_3-3I_2^2I_3I_4K_{10}K_3-6I_1I_2I_3I_5K_{10}K_3+4I_3^2I_4I_5K_{11}K_3-4I_2I_4^2I_5K_{11}K_3-4I_1I_4I_5^2K_{11}K_3-I_3^4K_{12}K_3+4I_2I_3^2I_4K_{12}K_3-2I_2^2I_4^2K_{12}K_3+4I_1I_3^2I_5K_{12}K_3-8I_1I_2I_4I_5K_{12}K_3-2I_1^2I_5^2K_{12}K_3+4I_1I_2I_3^2K_{13}K_3-4I_1I_2^2I_4K_{13}K_3-4I_1^2I_2I_5K_{13}K_3-{12}I_2^2I_5^2K_2K_3-4I_2^3I_5K_3^2-I_3^2I_4I_5K_{10}K_4+4I_2I_4^2I_5K_{10}K_4+4I_1I_4I_5^2K_{10}K_4-3I_3I_4^2I_5K_{12}K_4+I_3^3I_4K_{13}K_4-3I_2I_3I_4^2K_{13}K_4-6I_1I_3I_4I_5K_{13}K_4+I_3I_5^3K_2K_4+3I_2I_3I_5^2K_3K_4-I_4I_5^3K_4^2+I_3I_5^3K_1K_5-I_2I_3^2I_4K_{10}K_5+2I_2^2I_4^2K_{10}K_5-I_1I_3^2I_5K_{10}K_5+8I_1I_2I_4I_5K_{10}K_5+2I_1^2I_5^2K_{10}K_5-3I_3I_4^2I_5K_{11}K_5+I_3^3I_4K_{12}K_5-3I_2I_3I_4^2K_{12}K_5-6I_1I_3I_4I_5K_{12}K_5+I_1I_3^3K_{13}K_5-6I_1I_2I_3I_4K_{13}K_5-3I_1^2I_3I_5K_{13}K_5+3I_2I_3I_5^2K_2K_5+3I_2^2I_3I_5K_3K_5-6I_2I_4I_5^2K_4K_5-2I_1I_5^3K_4K_5-3I_2^2I_4I_5K_5^2-3I_1I_2I_5^2K_5^2+I_3I_4^2I_5K_{10}K_6+2I_4^3I_5K_{12}K_6-I_3^2I_4^2K_{13}K_6+2I_2I_4^3K_{13}K_6+6I_1I_4^2I_5K_{13}K_6+2I_4I_5^3K_2K_6-I_3^2I_5^2K_3K_6+6I_2I_4I_5^2K_3K_6+2I_1I_5^3K_3K_6+I_3I_4I_5^2K_5K_6+2I_4I_5^3K_1K_7+I_2I_3I_4^2K_{10}K_7+2I_1I_3I_4I_5K_{10}K_7+2I_4^3I_5K_{11}K_7-I_3^2I_4^2K_{12}K_7+2I_2I_4^3K_{12}K_7+6I_1I_4^2I_5K_{12}K_7-2I_1I_3^2I_4K_{13}K_7+6I_1I_2I_4^2K_{13}K_7+6I_1^2I_4I_5K_{13}K_7-I_3^2I_5^2K_2K_7+6I_2I_4I_5^2K_2K_7+2I_1I_5^3K_2K_7-2I_2I_3^2I_5K_3K_7+6I_2^2I_4I_5K_3K_7+6I_1I_2I_5^2K_3K_7+I_3I_4I_5^2K_4K_7+2I_2I_3I_4I_5K_5K_7+I_1I_3I_5^2K_5K_7-2I_4^2I_5^2K_6K_7-2I_2I_4^2I_5K_7^2-2I_1I_4I_5^2K_7^2-I_3^2I_5^2K_1K_8+6I_2I_4I_5^2K_1K_8+2I_1I_5^3K_1K_8+2I_1I_2I_3I_4K_{10}K_8+I_1^2I_3I_5K_{10}K_8-I_3^2I_4^2K_{11}K_8+2I_2I_4^3K_{11}K_8+6I_1I_4^2I_5K_{11}K_8-2I_1I_3^2I_4K_{12}K_8+6I_1I_2I_4^2K_{12}K_8+6I_1^2I_4I_5K_{12}K_8-I_1^2I_3^2K_{13}K_8+6I_1^2I_2I_4K_{13}K_8+2I_1^3I_5K_{13}K_8-2I_2I_3^2I_5K_2K_8+6I_2^2I_4I_5K_2K_8+6I_1I_2I_5^2K_2K_8-I_2^2I_3^2K_3K_8+2I_2^3I_4K_3K_8+6I_1I_2^2I_5K_3K_8+2I_2I_3I_4I_5K_4K_8+I_1I_3I_5^2K_4K_8+I_2^2I_3I_4K_5K_8+2I_1I_2I_3I_5K_5K_8-4I_2I_4^2I_5K_6K_8-4I_1I_4I_5^2K_6K_8-2I_2^2I_4^2K_7K_8-8I_1I_2I_4I_5K_7K_8-2I_1^2I_5^2K_7K_8-2I_1I_2^2I_4K_8^2-2I_1^2I_2I_5K_8^2-2I_2I_4^3K_{10}K_9-6I_1I_4^2I_5K_{10}K_9+I_3I_4^3K_{12}K_9+3I_1I_3I_4^2K_{13}K_9-3I_3I_4I_5^2K_2K_9+I_3^3I_5K_3K_9-6I_2I_3I_4I_5K_3K_9-3I_1I_3I_5^2K_3K_9+2I_4^2I_5^2K_4K_9-I_3^2I_4I_5K_5K_9+4I_2I_4^2I_5K_5K_9+4I_1I_4I_5^2K_5K_9+I_3I_4^2I_5K_7K_9+I_2I_3I_4^2K_8K_9+2I_1I_3I_4I_5K_8K_9-I_4^3I_5K_9^2)x^6 + \\
(-I_2I_4^3K_{10}^2-3I_1I_4^2I_5K_{10}^2+I_3I_4^3K_{10}K_{12}-I_4^4K_{12}^2-2I_4^2I_5^2K_1K_{13}+3I_1I_3I_4^2K_{10}K_{13}-2I_4^4K_{11}K_{13}-8I_1I_4^3K_{12}K_{13}-6I_1^2I_4^2K_{13}^2-3I_3I_4I_5^2K_{10}K_2-2I_4^2I_5^2K_{12}K_2+4I_3^2I_4I_5K_{13}K_2-4I_2I_4^2I_5K_{13}K_2-4I_1I_4I_5^2K_{13}K_2-I_5^4K_2^2-2I_5^4K_1K_3+I_3^3I_5K_{10}K_3-6I_2I_3I_4I_5K_{10}K_3-3I_1I_3I_5^2K_{10}K_3-2I_4^2I_5^2K_{11}K_3+4I_3^2I_4I_5K_{12}K_3-4I_2I_4^2I_5K_{12}K_3-4I_1I_4I_5^2K_{12}K_3-I_3^4K_{13}K_3+4I_2I_3^2I_4K_{13}K_3-2I_2^2I_4^2K_{13}K_3+4I_1I_3^2I_5K_{13}K_3-8I_1I_2I_4I_5K_{13}K_3-2I_1^2I_5^2K_{13}K_3-8I_2I_5^3K_2K_3-6I_2^2I_5^2K_3^2+2I_4^2I_5^2K_{10}K_4-3I_3I_4^2I_5K_{13}K_4+I_3I_5^3K_3K_4-I_3^2I_4I_5K_{10}K_5+4I_2I_4^2I_5K_{10}K_5+4I_1I_4I_5^2K_{10}K_5-3I_3I_4^2I_5K_{12}K_5+I_3^3I_4K_{13}K_5-3I_2I_3I_4^2K_{13}K_5-6I_1I_3I_4I_5K_{13}K_5+I_3I_5^3K_2K_5+3I_2I_3I_5^2K_3K_5-2I_4I_5^3K_4K_5-3I_2I_4I_5^2K_5^2-I_1I_5^3K_5^2+2I_4^3I_5K_{13}K_6+2I_4I_5^3K_3K_6+I_3I_4^2I_5K_{10}K_7+2I_4^3I_5K_{12}K_7-I_3^2I_4^2K_{13}K_7+2I_2I_4^3K_{13}K_7+6I_1I_4^2I_5K_{13}K_7+2I_4I_5^3K_2K_7-I_3^2I_5^2K_3K_7+6I_2I_4I_5^2K_3K_7+2I_1I_5^3K_3K_7+I_3I_4I_5^2K_5K_7-I_4^2I_5^2K_7^2+2I_4I_5^3K_1K_8+I_2I_3I_4^2K_{10}K_8+2I_1I_3I_4I_5K_{10}K_8+2I_4^3I_5K_{11}K_8-I_3^2I_4^2K_{12}K_8+2I_2I_4^3K_{12}K_8+6I_1I_4^2I_5K_{12}K_8-2I_1I_3^2I_4K_{13}K_8+6I_1I_2I_4^2K_{13}K_8+6I_1^2I_4I_5K_{13}K_8-I_3^2I_5^2K_2K_8+6I_2I_4I_5^2K_2K_8+2I_1I_5^3K_2K_8-2I_2I_3^2I_5K_3K_8+6I_2^2I_4I_5K_3K_8+6I_1I_2I_5^2K_3K_8+I_3I_4I_5^2K_4K_8+2I_2I_3I_4I_5K_5K_8+I_1I_3I_5^2K_5K_8-2I_4^2I_5^2K_6K_8-4I_2I_4^2I_5K_7K_8-4I_1I_4I_5^2K_7K_8-I_2^2I_4^2K_8^2-4I_1I_2I_4I_5K_8^2-I_1^2I_5^2K_8^2-2I_4^3I_5K_{10}K_9+I_3I_4^3K_{13}K_9-3I_3I_4I_5^2K_3K_9+2I_4^2I_5^2K_5K_9+I_3I_4^2I_5K_8K_9)x^4 + \\
(-I_4^3I_5K_{10}^2+I_3I_4^3K_{10}K_{13}-2I_4^4K_{12}K_{13}-4I_1I_4^3K_{13}^2-2I_4^2I_5^2K_{13}K_2-3I_3I_4I_5^2K_{10}K_3-2I_4^2I_5^2K_{12}K_3+4I_3^2I_4I_5K_{13}K_3-4I_2I_4^2I_5K_{13}K_3-4I_1I_4I_5^2K_{13}K_3-2I_5^4K_2K_3-4I_2I_5^3K_3^2+2I_4^2I_5^2K_{10}K_5-3I_3I_4^2I_5K_{13}K_5+I_3I_5^3K_3K_5-I_4I_5^3K_5^2+2I_4^3I_5K_{13}K_7+2I_4I_5^3K_3K_7+I_3I_4^2I_5K_{10}K_8+2I_4^3I_5K_{12}K_8-I_3^2I_4^2K_{13}K_8+2I_2I_4^3K_{13}K_8+6I_1I_4^2I_5K_{13}K_8+2I_4I_5^3K_2K_8-I_3^2I_5^2K_3K_8+6I_2I_4I_5^2K_3K_8+2I_1I_5^3K_3K_8+I_3I_4I_5^2K_5K_8-2I_4^2I_5^2K_7K_8-2I_2I_4^2I_5K_8^2-2I_1I_4I_5^2K_8^2)x^2 + \\
(-I_4^4K_{13}^2-2I_4^2I_5^2K_{13}K_3-I_5^4K_3^2+2I_4^3I_5K_{13}K_8+2I_4I_5^3K_3K_8-I_4^2I_5^2K_8^2)
$

\end{document}
